{
    "version": "1",
    "pip_version": "23.1.2",
    "install": [
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/9a/2c/9b49a12fef7345aa573af0d3781bdc8a3f43f95f433fb1bb53a5f5d0b692/rez_pip-0.3.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=6e5f49af0939561b61a1d68bd2ac184f94d967e6d4c0a3c1696e6662e92d8f18",
            "hashes": {
              "sha256": "6e5f49af0939561b61a1d68bd2ac184f94d967e6d4c0a3c1696e6662e92d8f18"
            }
          }
        },
        "is_direct": false,
        "requested": true,
        "metadata": {
          "metadata_version": "2.1",
          "name": "rez-pip",
          "version": "0.3.0",
          "summary": "Modern rez-pip",
          "description_content_type": "text/markdown",
          "author_email": "Jean-Christophe Morin <jean_christophe_morin@hotmail.com>",
          "license": "Apache License\n                                   Version 2.0, January 2004\n                                http://www.apache.org/licenses/\n        \n           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n        \n           1. Definitions.\n        \n              \"License\" shall mean the terms and conditions for use, reproduction,\n              and distribution as defined by Sections 1 through 9 of this document.\n        \n              \"Licensor\" shall mean the copyright owner or entity authorized by\n              the copyright owner that is granting the License.\n        \n              \"Legal Entity\" shall mean the union of the acting entity and all\n              other entities that control, are controlled by, or are under common\n              control with that entity. For the purposes of this definition,\n              \"control\" means (i) the power, direct or indirect, to cause the\n              direction or management of such entity, whether by contract or\n              otherwise, or (ii) ownership of fifty percent (50%) or more of the\n              outstanding shares, or (iii) beneficial ownership of such entity.\n        \n              \"You\" (or \"Your\") shall mean an individual or Legal Entity\n              exercising permissions granted by this License.\n        \n              \"Source\" form shall mean the preferred form for making modifications,\n              including but not limited to software source code, documentation\n              source, and configuration files.\n        \n              \"Object\" form shall mean any form resulting from mechanical\n              transformation or translation of a Source form, including but\n              not limited to compiled object code, generated documentation,\n              and conversions to other media types.\n        \n              \"Work\" shall mean the work of authorship, whether in Source or\n              Object form, made available under the License, as indicated by a\n              copyright notice that is included in or attached to the work\n              (an example is provided in the Appendix below).\n        \n              \"Derivative Works\" shall mean any work, whether in Source or Object\n              form, that is based on (or derived from) the Work and for which the\n              editorial revisions, annotations, elaborations, or other modifications\n              represent, as a whole, an original work of authorship. For the purposes\n              of this License, Derivative Works shall not include works that remain\n              separable from, or merely link (or bind by name) to the interfaces of,\n              the Work and Derivative Works thereof.\n        \n              \"Contribution\" shall mean any work of authorship, including\n              the original version of the Work and any modifications or additions\n              to that Work or Derivative Works thereof, that is intentionally\n              submitted to Licensor for inclusion in the Work by the copyright owner\n              or by an individual or Legal Entity authorized to submit on behalf of\n              the copyright owner. For the purposes of this definition, \"submitted\"\n              means any form of electronic, verbal, or written communication sent\n              to the Licensor or its representatives, including but not limited to\n              communication on electronic mailing lists, source code control systems,\n              and issue tracking systems that are managed by, or on behalf of, the\n              Licensor for the purpose of discussing and improving the Work, but\n              excluding communication that is conspicuously marked or otherwise\n              designated in writing by the copyright owner as \"Not a Contribution.\"\n        \n              \"Contributor\" shall mean Licensor and any individual or Legal Entity\n              on behalf of whom a Contribution has been received by Licensor and\n              subsequently incorporated within the Work.\n        \n           2. Grant of Copyright License. Subject to the terms and conditions of\n              this License, each Contributor hereby grants to You a perpetual,\n              worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n              copyright license to reproduce, prepare Derivative Works of,\n              publicly display, publicly perform, sublicense, and distribute the\n              Work and such Derivative Works in Source or Object form.\n        \n           3. Grant of Patent License. Subject to the terms and conditions of\n              this License, each Contributor hereby grants to You a perpetual,\n              worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n              (except as stated in this section) patent license to make, have made,\n              use, offer to sell, sell, import, and otherwise transfer the Work,\n              where such license applies only to those patent claims licensable\n              by such Contributor that are necessarily infringed by their\n              Contribution(s) alone or by combination of their Contribution(s)\n              with the Work to which such Contribution(s) was submitted. If You\n              institute patent litigation against any entity (including a\n              cross-claim or counterclaim in a lawsuit) alleging that the Work\n              or a Contribution incorporated within the Work constitutes direct\n              or contributory patent infringement, then any patent licenses\n              granted to You under this License for that Work shall terminate\n              as of the date such litigation is filed.\n        \n           4. Redistribution. You may reproduce and distribute copies of the\n              Work or Derivative Works thereof in any medium, with or without\n              modifications, and in Source or Object form, provided that You\n              meet the following conditions:\n        \n              (a) You must give any other recipients of the Work or\n                  Derivative Works a copy of this License; and\n        \n              (b) You must cause any modified files to carry prominent notices\n                  stating that You changed the files; and\n        \n              (c) You must retain, in the Source form of any Derivative Works\n                  that You distribute, all copyright, patent, trademark, and\n                  attribution notices from the Source form of the Work,\n                  excluding those notices that do not pertain to any part of\n                  the Derivative Works; and\n        \n              (d) If the Work includes a \"NOTICE\" text file as part of its\n                  distribution, then any Derivative Works that You distribute must\n                  include a readable copy of the attribution notices contained\n                  within such NOTICE file, excluding those notices that do not\n                  pertain to any part of the Derivative Works, in at least one\n                  of the following places: within a NOTICE text file distributed\n                  as part of the Derivative Works; within the Source form or\n                  documentation, if provided along with the Derivative Works; or,\n                  within a display generated by the Derivative Works, if and\n                  wherever such third-party notices normally appear. The contents\n                  of the NOTICE file are for informational purposes only and\n                  do not modify the License. You may add Your own attribution\n                  notices within Derivative Works that You distribute, alongside\n                  or as an addendum to the NOTICE text from the Work, provided\n                  that such additional attribution notices cannot be construed\n                  as modifying the License.\n        \n              You may add Your own copyright statement to Your modifications and\n              may provide additional or different license terms and conditions\n              for use, reproduction, or distribution of Your modifications, or\n              for any such Derivative Works as a whole, provided Your use,\n              reproduction, and distribution of the Work otherwise complies with\n              the conditions stated in this License.\n        \n           5. Submission of Contributions. Unless You explicitly state otherwise,\n              any Contribution intentionally submitted for inclusion in the Work\n              by You to the Licensor shall be under the terms and conditions of\n              this License, without any additional terms or conditions.\n              Notwithstanding the above, nothing herein shall supersede or modify\n              the terms of any separate license agreement you may have executed\n              with Licensor regarding such Contributions.\n        \n           6. Trademarks. This License does not grant permission to use the trade\n              names, trademarks, service marks, or product names of the Licensor,\n              except as required for reasonable and customary use in describing the\n              origin of the Work and reproducing the content of the NOTICE file.\n        \n           7. Disclaimer of Warranty. Unless required by applicable law or\n              agreed to in writing, Licensor provides the Work (and each\n              Contributor provides its Contributions) on an \"AS IS\" BASIS,\n              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n              implied, including, without limitation, any warranties or conditions\n              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n              PARTICULAR PURPOSE. You are solely responsible for determining the\n              appropriateness of using or redistributing the Work and assume any\n              risks associated with Your exercise of permissions under this License.\n        \n           8. Limitation of Liability. In no event and under no legal theory,\n              whether in tort (including negligence), contract, or otherwise,\n              unless required by applicable law (such as deliberate and grossly\n              negligent acts) or agreed to in writing, shall any Contributor be\n              liable to You for damages, including any direct, indirect, special,\n              incidental, or consequential damages of any character arising as a\n              result of this License or out of the use or inability to use the\n              Work (including but not limited to damages for loss of goodwill,\n              work stoppage, computer failure or malfunction, or any and all\n              other commercial damages or losses), even if such Contributor\n              has been advised of the possibility of such damages.\n        \n           9. Accepting Warranty or Additional Liability. While redistributing\n              the Work or Derivative Works thereof, You may choose to offer,\n              and charge a fee for, acceptance of support, warranty, indemnity,\n              or other liability obligations and/or rights consistent with this\n              License. However, in accepting such obligations, You may act only\n              on Your own behalf and on Your sole responsibility, not on behalf\n              of any other Contributor, and only if You agree to indemnify,\n              defend, and hold each Contributor harmless for any liability\n              incurred by, or claims asserted against, such Contributor by reason\n              of your accepting any such warranty or additional liability.\n        \n           END OF TERMS AND CONDITIONS\n        \n           APPENDIX: How to apply the Apache License to your work.\n        \n              To apply the Apache License to your work, attach the following\n              boilerplate notice, with the fields enclosed by brackets \"[]\"\n              replaced with your own identifying information. (Don't include\n              the brackets!)  The text should be enclosed in the appropriate\n              comment syntax for the file format. We also recommend that a\n              file or class name and description of purpose be included on the\n              same \"printed page\" as the copyright notice for easier\n              identification within third-party archives.\n        \n           Copyright 2022 Jean-Christophe Morin\n        \n           Licensed under the Apache License, Version 2.0 (the \"License\");\n           you may not use this file except in compliance with the License.\n           You may obtain a copy of the License at\n        \n               http://www.apache.org/licenses/LICENSE-2.0\n        \n           Unless required by applicable law or agreed to in writing, software\n           distributed under the License is distributed on an \"AS IS\" BASIS,\n           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n           See the License for the specific language governing permissions and\n           limitations under the License.",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "License :: OSI Approved :: Apache Software License",
            "Natural Language :: English",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11"
          ],
          "requires_dist": [
            "aiohttp",
            "dataclasses-json",
            "importlib-metadata>=4.6; python_version < '3.10'",
            "installer>=0.7.0",
            "packaging>=23.1",
            "rez",
            "rich"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Homepage, https://github.com/JeanChristopheMorinPerso/rez-pip",
            "Tracker, https://github.com/JeanChristopheMorinPerso/rez-pip/issues",
            "Documentation, https://rez-pip.readthedocs.io"
          ],
          "description": "# rez-pip\n[![Coverage](https://codecov.io/gh/JeanChristopheMorinPerso/rez-pip/branch/main/graph/badge.svg?token=SYLI4WI7F1)](https://codecov.io/gh/JeanChristopheMorinPerso/rez-pip)\n\nModern rez-pip implementation. Very WIP.\n\n## TODOs\n\n* [x] Install packages without using pip\n* [x] Specify Python version to use\n* [ ] Better logs and CLI experience\n    * [x] Use logging\n    * [x] Progress bars for download?\n* [x] Confirm that Python 2 is supported\n    * It is not...\n* [x] Confirm that the theory works as expected\n* [x] Windows support\n* [ ] Hook into rez\n    * [x] Install each package in a different `--target`\n    * [x] Create rez package\n    * [x] Copy distribution files to rez package.\n    * [ ] Make it available as a rez plugin/sub-command\n    * [ ] Discover Python package using rez and use that when available. I think it's still fine to support non-rezified Python interpreters though.\n    * [ ] Only download+convert package if it's not already in the rez repositories.\n    * etc\n* [x] Accept multiple package names as input\n* [x] Accept requirements files as input\n* [ ] Accept wheel files as input\n* [ ] Properly support platform tags (wheels tags) so that GLIBC is respected, min macOS is also supported.\n* [ ] Correctly handle Requires-Python metadata.\n* [ ] Review all TODOs in the code.\n* What whould we do with `rez.system` and `rez.vendor.version`?\n* [ ] Gather a list of problematic packages from GitHub and test against them.\n* [ ] Go through GitHub issues and summarize what needs to be covered by the new rez-pip.\n* [ ] Support abi3 wheels (to avoid having to re-install C extensions for every python version).\n    * https://docs.python.org/3/c-api/stable.html\n    * https://peps.python.org/pep-0425/\n    * Basically a tag like 'cp36-abi3-manylinux_2_24_x86_64' means\n      that it is compatible with Python 3.6+ and doesn't need to be\n      recompiled for newer python versions.\n\n## Tips\n\nFor now, it can be run like this:\n\n```\nrez-pip2 pytest\n```\n\nBy default, rez packages will be released. You can choose a different path by passing the `--install-path` argument to rez-pip2.\n\n# Packages to test against\n\n* pytest\n* PySide, PySIde2, PySide6\n* PyQt4, PyQt5\n* psycopg2-binary\n* ipython\n* numpy\n* protobuf\n* click\n* Pygments (https://github.com/AcademySoftwareFoundation/rez/issues/1430)\n* google_api_core (https://github.com/AcademySoftwareFoundation/rez/issues/1414)\n* sphinx\n* networkx[default] (https://github.com/AcademySoftwareFoundation/rez/issues/1409)\n* black (https://github.com/AcademySoftwareFoundation/rez/issues/1341)\n* pylint (https://github.com/AcademySoftwareFoundation/rez/issues/1024)\n* ampq (https://github.com/AcademySoftwareFoundation/rez/issues/906)\n* cmd2 (https://github.com/AcademySoftwareFoundation/rez/issues/895)\n* astroid (https://github.com/AcademySoftwareFoundation/rez/issues/876)\n* Qt.py (https://github.com/AcademySoftwareFoundation/rez/issues/503)\n* Pillow\n* BeautifulSoup4\n* python-dateutil (https://github.com/AcademySoftwareFoundation/rez/issues/390)\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/cc/37/db7ba97e676af155f5fcb1a35466f446eadc9104e25b83366e8088c9c926/importlib_metadata-6.8.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=3ebb78df84a805d7698245025b975d9d67053cd94c79245ba4b3eb694abe68bb",
            "hashes": {
              "sha256": "3ebb78df84a805d7698245025b975d9d67053cd94c79245ba4b3eb694abe68bb"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "importlib-metadata",
          "version": "6.8.0",
          "summary": "Read metadata from Python packages",
          "home_page": "https://github.com/python/importlib_metadata",
          "author": "Jason R. Coombs",
          "author_email": "jaraco@jaraco.com",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only"
          ],
          "requires_dist": [
            "zipp (>=0.5)",
            "typing-extensions (>=3.6.4) ; python_version < \"3.8\"",
            "sphinx (>=3.5) ; extra == 'docs'",
            "jaraco.packaging (>=9) ; extra == 'docs'",
            "rst.linker (>=1.9) ; extra == 'docs'",
            "furo ; extra == 'docs'",
            "sphinx-lint ; extra == 'docs'",
            "jaraco.tidelift (>=1.4) ; extra == 'docs'",
            "ipython ; extra == 'perf'",
            "pytest (>=6) ; extra == 'testing'",
            "pytest-checkdocs (>=2.4) ; extra == 'testing'",
            "pytest-cov ; extra == 'testing'",
            "pytest-enabler (>=2.2) ; extra == 'testing'",
            "pytest-ruff ; extra == 'testing'",
            "packaging ; extra == 'testing'",
            "pyfakefs ; extra == 'testing'",
            "flufl.flake8 ; extra == 'testing'",
            "pytest-perf (>=0.9.2) ; extra == 'testing'",
            "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
            "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
            "importlib-resources (>=1.3) ; (python_version < \"3.9\") and extra == 'testing'"
          ],
          "requires_python": ">=3.8",
          "provides_extra": [
            "docs",
            "perf",
            "testing"
          ],
          "description": ".. image:: https://img.shields.io/pypi/v/importlib_metadata.svg\n   :target: https://pypi.org/project/importlib_metadata\n\n.. image:: https://img.shields.io/pypi/pyversions/importlib_metadata.svg\n\n.. image:: https://github.com/python/importlib_metadata/workflows/tests/badge.svg\n   :target: https://github.com/python/importlib_metadata/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: Ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/importlib-metadata/badge/?version=latest\n   :target: https://importlib-metadata.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/importlib-metadata\n   :target: https://tidelift.com/subscription/pkg/pypi-importlib-metadata?utm_source=pypi-importlib-metadata&utm_medium=readme\n\nLibrary to access the metadata for a Python package.\n\nThis package supplies third-party access to the functionality of\n`importlib.metadata <https://docs.python.org/3/library/importlib.metadata.html>`_\nincluding improvements added to subsequent Python versions.\n\n\nCompatibility\n=============\n\nNew features are introduced in this third-party library and later merged\ninto CPython. The following table indicates which versions of this library\nwere contributed to different versions in the standard library:\n\n.. list-table::\n   :header-rows: 1\n\n   * - importlib_metadata\n     - stdlib\n   * - 6.5\n     - 3.12\n   * - 4.13\n     - 3.11\n   * - 4.6\n     - 3.10\n   * - 1.4\n     - 3.8\n\n\nUsage\n=====\n\nSee the `online documentation <https://importlib-metadata.readthedocs.io/>`_\nfor usage details.\n\n`Finder authors\n<https://docs.python.org/3/reference/import.html#finders-and-loaders>`_ can\nalso add support for custom package installers.  See the above documentation\nfor details.\n\n\nCaveats\n=======\n\nThis project primarily supports third-party packages installed by PyPA\ntools (or other conforming packages). It does not support:\n\n- Packages in the stdlib.\n- Packages installed without metadata.\n\nProject details\n===============\n\n * Project home: https://github.com/python/importlib_metadata\n * Report bugs at: https://github.com/python/importlib_metadata/issues\n * Code hosting: https://github.com/python/importlib_metadata\n * Documentation: https://importlib-metadata.readthedocs.io/\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-importlib-metadata?utm_source=pypi-importlib-metadata&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/e5/ca/1172b6638d52f2d6caa2dd262ec4c811ba59eee96d54a7701930726bce18/installer-0.7.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=05d1933f0a5ba7d8d6296bb6d5018e7c94fa473ceb10cf198a92ccea19c27b53",
            "hashes": {
              "sha256": "05d1933f0a5ba7d8d6296bb6d5018e7c94fa473ceb10cf198a92ccea19c27b53"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "installer",
          "version": "0.7.0",
          "summary": "A library for installing Python wheels.",
          "description_content_type": "text/markdown",
          "author_email": "Pradyun Gedam <pradyunsg@gmail.com>",
          "classifier": [
            "License :: OSI Approved :: MIT License"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "GitHub, https://github.com/pypa/installer"
          ],
          "description": "# installer\n\n<!-- start readme-pitch -->\n\nThis is a low-level library for installing a Python package from a\n[wheel distribution](https://packaging.python.org/glossary/#term-Wheel). It\nprovides basic functionality and abstractions for handling wheels and installing\npackages from wheels.\n\n- Logic for \"unpacking\" a wheel (i.e. installation).\n- Abstractions for various parts of the unpacking process.\n- Extensible simple implementations of the abstractions.\n- Platform-independent Python script wrapper generation.\n\n<!-- end readme-pitch -->\n\nYou can read more in the [documentation](https://installer.rtfd.io/).\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/ec/1a/610693ac4ee14fcdf2d9bf3c493370e4f2ef7ae2e19217d7a237ff42367d/packaging-23.2-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7",
            "hashes": {
              "sha256": "8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "packaging",
          "version": "23.2",
          "summary": "Core utilities for Python packages",
          "description_content_type": "text/x-rst",
          "author_email": "Donald Stufft <donald@stufft.io>",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "License :: OSI Approved :: BSD License",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
            "Programming Language :: Python :: Implementation :: CPython",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Typing :: Typed"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Documentation, https://packaging.pypa.io/",
            "Source, https://github.com/pypa/packaging"
          ],
          "description": "packaging\n=========\n\n.. start-intro\n\nReusable core utilities for various Python Packaging\n`interoperability specifications <https://packaging.python.org/specifications/>`_.\n\nThis library provides utilities that implement the interoperability\nspecifications which have clearly one correct behaviour (eg: :pep:`440`)\nor benefit greatly from having a single shared implementation (eg: :pep:`425`).\n\n.. end-intro\n\nThe ``packaging`` project includes the following: version handling, specifiers,\nmarkers, requirements, tags, utilities.\n\nDocumentation\n-------------\n\nThe `documentation`_ provides information and the API for the following:\n\n- Version Handling\n- Specifiers\n- Markers\n- Requirements\n- Tags\n- Utilities\n\nInstallation\n------------\n\nUse ``pip`` to install these utilities::\n\n    pip install packaging\n\nThe ``packaging`` library uses calendar-based versioning (``YY.N``).\n\nDiscussion\n----------\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nYou can also join ``#pypa`` on Freenode to ask questions or get involved.\n\n\n.. _`documentation`: https://packaging.pypa.io/\n.. _`issue tracker`: https://github.com/pypa/packaging/issues\n\n\nCode of Conduct\n---------------\n\nEveryone interacting in the packaging project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\nContributing\n------------\n\nThe ``CONTRIBUTING.rst`` file outlines how to contribute to this project as\nwell as how to report a potential security issue. The documentation for this\nproject also covers information about `project development`_ and `security`_.\n\n.. _`project development`: https://packaging.pypa.io/en/latest/development/\n.. _`security`: https://packaging.pypa.io/en/latest/security/\n\nProject History\n---------------\n\nPlease review the ``CHANGELOG.rst`` file or the `Changelog documentation`_ for\nrecent changes and project history.\n\n.. _`Changelog documentation`: https://packaging.pypa.io/en/latest/changelog/\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/64/bf/dffc041dd3d36d6b4624bde63d222c1735c525811e9fd6026397c612491d/aiohttp-3.8.6-cp39-cp39-win_amd64.whl",
          "archive_info": {
            "hash": "sha256=3f0e27e5b733803333bb2371249f41cf42bae8884863e8e8965ec69bebe53132",
            "hashes": {
              "sha256": "3f0e27e5b733803333bb2371249f41cf42bae8884863e8e8965ec69bebe53132"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "aiohttp",
          "version": "3.8.6",
          "summary": "Async http client/server framework (asyncio)",
          "description_content_type": "text/x-rst",
          "home_page": "https://github.com/aio-libs/aiohttp",
          "maintainer": "aiohttp team <team@aiohttp.org>",
          "maintainer_email": "team@aiohttp.org",
          "license": "Apache 2",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Framework :: AsyncIO",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Operating System :: POSIX",
            "Operating System :: MacOS :: MacOS X",
            "Operating System :: Microsoft :: Windows",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Topic :: Internet :: WWW/HTTP"
          ],
          "requires_dist": [
            "attrs >=17.3.0",
            "charset-normalizer <4.0,>=2.0",
            "multidict <7.0,>=4.5",
            "async-timeout <5.0,>=4.0.0a3",
            "yarl <2.0,>=1.0",
            "frozenlist >=1.1.1",
            "aiosignal >=1.1.2",
            "idna-ssl >=1.0 ; python_version < \"3.7\"",
            "asynctest ==0.13.0 ; python_version < \"3.8\"",
            "typing-extensions >=3.7.4 ; python_version < \"3.8\"",
            "aiodns ; extra == 'speedups'",
            "Brotli ; extra == 'speedups'",
            "cchardet ; (python_version < \"3.10\") and extra == 'speedups'"
          ],
          "requires_python": ">=3.6",
          "project_url": [
            "Chat: Matrix, https://matrix.to/#/#aio-libs:matrix.org",
            "Chat: Matrix Space, https://matrix.to/#/#aio-libs-space:matrix.org",
            "CI: GitHub Actions, https://github.com/aio-libs/aiohttp/actions?query=workflow%3ACI",
            "Coverage: codecov, https://codecov.io/github/aio-libs/aiohttp",
            "Docs: Changelog, https://docs.aiohttp.org/en/stable/changes.html",
            "Docs: RTD, https://docs.aiohttp.org",
            "GitHub: issues, https://github.com/aio-libs/aiohttp/issues",
            "GitHub: repo, https://github.com/aio-libs/aiohttp"
          ],
          "provides_extra": [
            "speedups"
          ],
          "description": "==================================\r\nAsync http client/server framework\r\n==================================\r\n\r\n.. image:: https://raw.githubusercontent.com/aio-libs/aiohttp/master/docs/aiohttp-plain.svg\r\n   :height: 64px\r\n   :width: 64px\r\n   :alt: aiohttp logo\r\n\r\n|\r\n\r\n.. image:: https://github.com/aio-libs/aiohttp/workflows/CI/badge.svg\r\n   :target: https://github.com/aio-libs/aiohttp/actions?query=workflow%3ACI\r\n   :alt: GitHub Actions status for master branch\r\n\r\n.. image:: https://codecov.io/gh/aio-libs/aiohttp/branch/master/graph/badge.svg\r\n   :target: https://codecov.io/gh/aio-libs/aiohttp\r\n   :alt: codecov.io status for master branch\r\n\r\n.. image:: https://badge.fury.io/py/aiohttp.svg\r\n   :target: https://pypi.org/project/aiohttp\r\n   :alt: Latest PyPI package version\r\n\r\n.. image:: https://readthedocs.org/projects/aiohttp/badge/?version=latest\r\n   :target: https://docs.aiohttp.org/\r\n   :alt: Latest Read The Docs\r\n\r\n.. image:: https://img.shields.io/matrix/aio-libs:matrix.org?label=Discuss%20on%20Matrix%20at%20%23aio-libs%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\r\n   :target: https://matrix.to/#/%23aio-libs:matrix.org\r\n   :alt: Matrix Room — #aio-libs:matrix.org\r\n\r\n.. image:: https://img.shields.io/matrix/aio-libs-space:matrix.org?label=Discuss%20on%20Matrix%20at%20%23aio-libs-space%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\r\n   :target: https://matrix.to/#/%23aio-libs-space:matrix.org\r\n   :alt: Matrix Space — #aio-libs-space:matrix.org\r\n\r\n\r\nKey Features\r\n============\r\n\r\n- Supports both client and server side of HTTP protocol.\r\n- Supports both client and server Web-Sockets out-of-the-box and avoids\r\n  Callback Hell.\r\n- Provides Web-server with middlewares and plugable routing.\r\n\r\n\r\nGetting started\r\n===============\r\n\r\nClient\r\n------\r\n\r\nTo get something from the web:\r\n\r\n.. code-block:: python\r\n\r\n  import aiohttp\r\n  import asyncio\r\n\r\n  async def main():\r\n\r\n      async with aiohttp.ClientSession() as session:\r\n          async with session.get('http://python.org') as response:\r\n\r\n              print(\"Status:\", response.status)\r\n              print(\"Content-type:\", response.headers['content-type'])\r\n\r\n              html = await response.text()\r\n              print(\"Body:\", html[:15], \"...\")\r\n\r\n    asyncio.run(main())\r\n\r\nThis prints:\r\n\r\n.. code-block::\r\n\r\n    Status: 200\r\n    Content-type: text/html; charset=utf-8\r\n    Body: <!doctype html> ...\r\n\r\nComing from `requests <https://requests.readthedocs.io/>`_ ? Read `why we need so many lines <https://aiohttp.readthedocs.io/en/latest/http_request_lifecycle.html>`_.\r\n\r\nServer\r\n------\r\n\r\nAn example using a simple server:\r\n\r\n.. code-block:: python\r\n\r\n    # examples/server_simple.py\r\n    from aiohttp import web\r\n\r\n    async def handle(request):\r\n        name = request.match_info.get('name', \"Anonymous\")\r\n        text = \"Hello, \" + name\r\n        return web.Response(text=text)\r\n\r\n    async def wshandle(request):\r\n        ws = web.WebSocketResponse()\r\n        await ws.prepare(request)\r\n\r\n        async for msg in ws:\r\n            if msg.type == web.WSMsgType.text:\r\n                await ws.send_str(\"Hello, {}\".format(msg.data))\r\n            elif msg.type == web.WSMsgType.binary:\r\n                await ws.send_bytes(msg.data)\r\n            elif msg.type == web.WSMsgType.close:\r\n                break\r\n\r\n        return ws\r\n\r\n\r\n    app = web.Application()\r\n    app.add_routes([web.get('/', handle),\r\n                    web.get('/echo', wshandle),\r\n                    web.get('/{name}', handle)])\r\n\r\n    if __name__ == '__main__':\r\n        web.run_app(app)\r\n\r\n\r\nDocumentation\r\n=============\r\n\r\nhttps://aiohttp.readthedocs.io/\r\n\r\n\r\nDemos\r\n=====\r\n\r\nhttps://github.com/aio-libs/aiohttp-demos\r\n\r\n\r\nExternal links\r\n==============\r\n\r\n* `Third party libraries\r\n  <http://aiohttp.readthedocs.io/en/latest/third_party.html>`_\r\n* `Built with aiohttp\r\n  <http://aiohttp.readthedocs.io/en/latest/built_with.html>`_\r\n* `Powered by aiohttp\r\n  <http://aiohttp.readthedocs.io/en/latest/powered_by.html>`_\r\n\r\nFeel free to make a Pull Request for adding your link to these pages!\r\n\r\n\r\nCommunication channels\r\n======================\r\n\r\n*aio-libs discourse group*: https://aio-libs.discourse.group\r\n\r\n*gitter chat* https://gitter.im/aio-libs/Lobby\r\n\r\nWe support `Stack Overflow\r\n<https://stackoverflow.com/questions/tagged/aiohttp>`_.\r\nPlease add *aiohttp* tag to your question there.\r\n\r\nRequirements\r\n============\r\n\r\n- Python >= 3.6\r\n- async-timeout_\r\n- attrs_\r\n- charset-normalizer_\r\n- multidict_\r\n- yarl_\r\n- frozenlist_\r\n\r\nOptionally you may install the cChardet_ and aiodns_ libraries (highly\r\nrecommended for sake of speed).\r\n\r\n.. _charset-normalizer: https://pypi.org/project/charset-normalizer\r\n.. _aiodns: https://pypi.python.org/pypi/aiodns\r\n.. _attrs: https://github.com/python-attrs/attrs\r\n.. _multidict: https://pypi.python.org/pypi/multidict\r\n.. _frozenlist: https://pypi.org/project/frozenlist/\r\n.. _yarl: https://pypi.python.org/pypi/yarl\r\n.. _async-timeout: https://pypi.python.org/pypi/async_timeout\r\n.. _cChardet: https://pypi.python.org/pypi/cchardet\r\n\r\nLicense\r\n=======\r\n\r\n``aiohttp`` is offered under the Apache 2 license.\r\n\r\n\r\nKeepsafe\r\n========\r\n\r\nThe aiohttp community would like to thank Keepsafe\r\n(https://www.getkeepsafe.com) for its support in the early days of\r\nthe project.\r\n\r\n\r\nSource code\r\n===========\r\n\r\nThe latest developer version is available in a GitHub repository:\r\nhttps://github.com/aio-libs/aiohttp\r\n\r\nBenchmarks\r\n==========\r\n\r\nIf you are interested in efficiency, the AsyncIO community maintains a\r\nlist of benchmarks on the official wiki:\r\nhttps://github.com/python/asyncio/wiki/Benchmarks\r\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/21/1f/1cff009cff64420572b9f75b70e4a054095719179a172297dfdd65843162/dataclasses_json-0.6.1-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=1bd8418a61fe3d588bb0079214d7fb71d44937da40742b787256fd53b26b6c80",
            "hashes": {
              "sha256": "1bd8418a61fe3d588bb0079214d7fb71d44937da40742b787256fd53b26b6c80"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "dataclasses-json",
          "version": "0.6.1",
          "summary": "Easily serialize dataclasses to and from JSON.",
          "description_content_type": "text/markdown",
          "home_page": "https://github.com/lidatong/dataclasses-json",
          "author": "Charles Li",
          "author_email": "charles.dt.li@gmail.com",
          "maintainer": "Charles Li",
          "maintainer_email": "charles.dt.li@gmail.com",
          "license": "MIT",
          "classifier": [
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11"
          ],
          "requires_dist": [
            "marshmallow (>=3.18.0,<4.0.0)",
            "typing-inspect (>=0.4.0,<1)"
          ],
          "requires_python": ">=3.7,<4.0",
          "project_url": [
            "Repository, https://github.com/lidatong/dataclasses-json",
            "changelog, https://github.com/lidatong/dataclasses-json/releases",
            "documentation, https://lidatong.github.io/dataclasses-json/",
            "issues, https://github.com/lidatong/dataclasses-json/issues"
          ],
          "description": "# Dataclasses JSON\n\n![](https://github.com/lidatong/dataclasses-json/workflows/dataclasses-json/badge.svg)\n\nThis library provides a simple API for encoding and decoding [dataclasses](https://docs.python.org/3/library/dataclasses.html) to and from JSON.\n\nIt's very easy to get started.\n\n[README / Documentation website](https://lidatong.github.io/dataclasses-json). Features a navigation bar and search functionality, and should mirror this README exactly -- take a look!\n\n## Quickstart\n\n`pip install dataclasses-json`\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\n\nperson = Person(name='lidatong')\nperson.to_json()  # '{\"name\": \"lidatong\"}' <- this is a string\nperson.to_dict()  # {'name': 'lidatong'} <- this is a dict\nPerson.from_json('{\"name\": \"lidatong\"}')  # Person(1)\nPerson.from_dict({'name': 'lidatong'})  # Person(1)\n\n# You can also apply _schema validation_ using an alternative API\n# This can be useful for \"typed\" Python code\n\nPerson.from_json('{\"name\": 42}')  # This is ok. 42 is not a `str`, but\n                                  # dataclass creation does not validate types\nPerson.schema().loads('{\"name\": 42}')  # Error! Raises `ValidationError`\n```\n\n**What if you want to work with camelCase JSON?**\n\n```python\n# same imports as above, with the additional `LetterCase` import\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json, LetterCase\n\n@dataclass_json(letter_case=LetterCase.CAMEL)  # now all fields are encoded/decoded from camelCase\n@dataclass\nclass ConfiguredSimpleExample:\n    int_field: int\n\nConfiguredSimpleExample(1).to_json()  # {\"intField\": 1}\nConfiguredSimpleExample.from_json('{\"intField\": 1}')  # ConfiguredSimpleExample(1)\n```\n\n## Supported types\n\nIt's recursive (see caveats below), so you can easily work with nested dataclasses.\nIn addition to the supported types in the \n[py to JSON table](https://docs.python.org/3/library/json.html#py-to-json-table), this library supports the following:\n\n- any arbitrary [Collection](https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection) type is supported.\n[Mapping](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping) types are encoded as JSON objects and `str` types as JSON strings. \nAny other Collection types are encoded into JSON arrays, but decoded into the original collection types.\n\n- [datetime](https://docs.python.org/3/library/datetime.html#available-types) \nobjects. `datetime` objects are encoded to `float` (JSON number) using \n[timestamp](https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp).\nAs specified in the `datetime` docs, if your `datetime` object is naive, it will \nassume your system local timezone when calling `.timestamp()`. JSON numbers \ncorresponding to a `datetime` field in your dataclass are decoded \ninto a datetime-aware object, with `tzinfo` set to your system local timezone.\nThus, if you encode a datetime-naive object, you will decode into a \ndatetime-aware object. This is important, because encoding and decoding won't \nstrictly be inverses. See [this section](#Overriding) if you want to override this default\nbehavior (for example, if you want to use ISO).\n\n- [UUID](https://docs.python.org/3/library/uuid.html#uuid.UUID) objects. They \nare encoded as `str` (JSON string).\n\n- [Decimal](https://docs.python.org/3/library/decimal.html) objects. They are\nalso encoded as `str`.\n\n**The [latest release](https://github.com/lidatong/dataclasses-json/releases/latest) is compatible with both Python 3.7 and Python 3.6 (with the dataclasses backport).**\n\n## Usage\n\n#### Approach 1: Class decorator\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\nlidatong = Person('lidatong')\n\n# Encoding to JSON\nlidatong.to_json()  # '{\"name\": \"lidatong\"}'\n\n# Decoding from JSON\nPerson.from_json('{\"name\": \"lidatong\"}')  # Person(name='lidatong')\n```\n\nNote that the `@dataclass_json` decorator must be stacked above the `@dataclass`\ndecorator (order matters!)\n\n#### Approach 2: Inherit from a mixin\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import DataClassJsonMixin\n\n@dataclass\nclass Person(DataClassJsonMixin):\n    name: str\n\nlidatong = Person('lidatong')\n\n# A different example from Approach 1 above, but usage is the exact same\nassert Person.from_json(lidatong.to_json()) == lidatong\n```\n\nPick whichever approach suits your taste. Note that there is better support for\n the mixin approach when using _static analysis_ tools (e.g. linting, typing),\n but the differences in implementation will be invisible in _runtime_ usage.\n\n## How do I...\n\n\n\n### Use my dataclass with JSON arrays or objects?\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n```\n\n**Encode into a JSON array containing instances of my Data Class**\n\n```python\npeople_json = [Person('lidatong')]\nPerson.schema().dumps(people_json, many=True)  # '[{\"name\": \"lidatong\"}]'\n```\n\n**Decode a JSON array containing instances of my Data Class**\n\n```python\npeople_json = '[{\"name\": \"lidatong\"}]'\nPerson.schema().loads(people_json, many=True)  # [Person(name='lidatong')]\n```\n\n**Encode as part of a larger JSON object containing my Data Class (e.g. an HTTP \nrequest/response)**\n\n```python\nimport json\n\nresponse_dict = {\n    'response': {\n        'person': Person('lidatong').to_dict()\n    }\n}\n\nresponse_json = json.dumps(response_dict)\n```\n\nIn this case, we do two steps. First, we encode the dataclass into a \n**python dictionary** rather than a JSON string, using `.to_dict`. \n\nSecond, we leverage the built-in `json.dumps` to serialize our `dataclass` into \na JSON string.\n\n**Decode as part of a larger JSON object containing my Data Class (e.g. an HTTP \nresponse)**\n\n```python\nimport json\n\nresponse_dict = json.loads('{\"response\": {\"person\": {\"name\": \"lidatong\"}}}')\n\nperson_dict = response_dict['response']\n\nperson = Person.from_dict(person_dict)\n```\n\nIn a similar vein to encoding above, we leverage the built-in `json` module.\n\nFirst, call `json.loads` to read the entire JSON object into a \ndictionary. We then access the key of the value containing the encoded dict of \nour `Person` that we want to decode (`response_dict['response']`).\n\nSecond, we load in the dictionary using `Person.from_dict`.\n\n\n### Encode or decode into Python lists/dictionaries rather than JSON?\n\nThis can be by calling `.schema()` and then using the corresponding \nencoder/decoder methods, ie. `.load(...)`/`.dump(...)`.\n\n**Encode into a single Python dictionary**\n\n```python\nperson = Person('lidatong')\nperson.to_dict()  # {'name': 'lidatong'}\n```\n\n**Encode into a list of Python dictionaries**\n\n```python\npeople = [Person('lidatong')]\nPerson.schema().dump(people, many=True)  # [{'name': 'lidatong'}]\n```\n\n**Decode a dictionary into a single dataclass instance**\n\n```python\nperson_dict = {'name': 'lidatong'}\nPerson.from_dict(person_dict)  # Person(name='lidatong')\n```\n\n**Decode a list of dictionaries into a list of dataclass instances**\n\n```python\npeople_dicts = [{\"name\": \"lidatong\"}]\nPerson.schema().load(people_dicts, many=True)  # [Person(name='lidatong')]\n```\n\n### Encode or decode from camelCase (or kebab-case)?\n\nJSON letter case by convention is camelCase, in Python members are by convention snake_case.\n\nYou can configure it to encode/decode from other casing schemes at both the class level and the field level.\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import LetterCase, config, dataclass_json\n\n\n# changing casing at the class level\n@dataclass_json(letter_case=LetterCase.CAMEL)\n@dataclass\nclass Person:\n    given_name: str\n    family_name: str\n    \nPerson('Alice', 'Liddell').to_json()  # '{\"givenName\": \"Alice\"}'\nPerson.from_json('{\"givenName\": \"Alice\", \"familyName\": \"Liddell\"}')  # Person('Alice', 'Liddell')\n\n# at the field level\n@dataclass_json\n@dataclass\nclass Person:\n    given_name: str = field(metadata=config(letter_case=LetterCase.CAMEL))\n    family_name: str\n    \nPerson('Alice', 'Liddell').to_json()  # '{\"givenName\": \"Alice\"}'\n# notice how the `family_name` field is still snake_case, because it wasn't configured above\nPerson.from_json('{\"givenName\": \"Alice\", \"family_name\": \"Liddell\"}')  # Person('Alice', 'Liddell')\n```\n\n**This library assumes your field follows the Python convention of snake_case naming.**\nIf your field is not `snake_case` to begin with and you attempt to parameterize `LetterCase`, \nthe behavior of encoding/decoding is undefined (most likely it will result in subtle bugs).\n\n### Encode or decode using a different name\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import config, dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    given_name: str = field(metadata=config(field_name=\"overriddenGivenName\"))\n\nPerson(given_name=\"Alice\")  # Person('Alice')\nPerson.from_json('{\"overriddenGivenName\": \"Alice\"}')  # Person('Alice')\nPerson('Alice').to_json()  # {\"overriddenGivenName\": \"Alice\"}\n```\n\n### Handle missing or optional field values when decoding?\n\nBy default, any fields in your dataclass that use `default` or \n`default_factory` will have the values filled with the provided default, if the\ncorresponding field is missing from the JSON you're decoding.\n\n**Decode JSON with missing field**\n\n```python\n@dataclass_json\n@dataclass\nclass Student:\n    id: int\n    name: str = 'student'\n\nStudent.from_json('{\"id\": 1}')  # Student(id=1, name='student')\n```\n\nNotice `from_json` filled the field `name` with the specified default 'student'\nwhen it was missing from the JSON.\n\nSometimes you have fields that are typed as `Optional`, but you don't \nnecessarily want to assign a default. In that case, you can use the \n`infer_missing` kwarg to make `from_json` infer the missing field value as `None`.\n\n**Decode optional field without default**\n\n```python\n@dataclass_json\n@dataclass\nclass Tutor:\n    id: int\n    student: Optional[Student] = None\n\nTutor.from_json('{\"id\": 1}')  # Tutor(id=1, student=None)\n```\n\nPersonally I recommend you leverage dataclass defaults rather than using \n`infer_missing`, but if for some reason you need to decouple the behavior of \nJSON decoding from the field's default value, this will allow you to do so.\n\n\n### Handle unknown / extraneous fields in JSON?\n\nBy default, it is up to the implementation what happens when a `json_dataclass` receives input parameters that are not defined.\n(the `from_dict` method ignores them, when loading using `schema()` a ValidationError is raised.)\nThere are three ways to customize this behavior.\n\nAssume you want to instantiate a dataclass with the following dictionary:\n```python\ndump_dict = {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}, \"undefined_field_name\": [1, 2, 3]}\n```\n\n1. You can enforce to always raise an error by setting the `undefined` keyword to `Undefined.RAISE`\n (`'RAISE'` as a case-insensitive string works as well). Of course it works normally if you don't pass any undefined parameters.\n    \n```python\nfrom dataclasses_json import Undefined\n\n@dataclass_json(undefined=Undefined.RAISE)\n@dataclass()\nclass ExactAPIDump:\n    endpoint: str\n    data: Dict[str, Any]\n\ndump = ExactAPIDump.from_dict(dump_dict)  # raises UndefinedParameterError\n```\n\n2. You can simply ignore any undefined parameters by setting the `undefined` keyword to `Undefined.EXCLUDE`\n (`'EXCLUDE'` as a case-insensitive string works as well). Note that you will not be able to retrieve them using `to_dict`:\n    \n```python\nfrom dataclasses_json import Undefined\n\n@dataclass_json(undefined=Undefined.EXCLUDE)\n@dataclass()\nclass DontCareAPIDump:\n    endpoint: str\n    data: Dict[str, Any]\n\ndump = DontCareAPIDump.from_dict(dump_dict)  # DontCareAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'})\ndump.to_dict()  # {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}}\n```\n\n3. You can save them in a catch-all field and do whatever needs to be done later. Simply set the `undefined`\nkeyword to `Undefined.INCLUDE` (`'INCLUDE'` as a case-insensitive string works as well) and define a field\nof type `CatchAll` where all unknown values will end up.\n This simply represents a dictionary that can hold anything. \n If there are no undefined parameters, this will be an empty dictionary.\n    \n```python\nfrom dataclasses_json import Undefined, CatchAll\n\n@dataclass_json(undefined=Undefined.INCLUDE)\n@dataclass()\nclass UnknownAPIDump:\n    endpoint: str\n    data: Dict[str, Any]\n    unknown_things: CatchAll\n\ndump = UnknownAPIDump.from_dict(dump_dict)  # UnknownAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'}, unknown_things={'undefined_field_name': [1, 2, 3]})\ndump.to_dict()  # {'endpoint': 'some_api_endpoint', 'data': {'foo': 1, 'bar': '2'}, 'undefined_field_name': [1, 2, 3]}\n```\n\nNotes:\n- When using `Undefined.INCLUDE`, an `UndefinedParameterError` will be raised if you don't specify\nexactly one field of type `CatchAll`.\n- Note that `LetterCase` does not affect values written into the `CatchAll` field, they will be as they are given.\n- When specifying a default (or a default factory) for the the `CatchAll`-field, e.g. `unknown_things: CatchAll = None`, the default value will be used instead of an empty dict if there are no undefined parameters.\n- Calling __init__ with non-keyword arguments resolves the arguments to the defined fields and writes everything else into the catch-all field.\n\n4. All 3 options work as well using `schema().loads` and `schema().dumps`, as long as you don't overwrite it by specifying `schema(unknown=<a marshmallow value>)`.\nmarshmallow uses the same 3 keywords ['include', 'exclude', 'raise'](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields).\n\n5. All 3 operations work as well using `__init__`, e.g. `UnknownAPIDump(**dump_dict)` will **not** raise a `TypeError`, but write all unknown values to the field tagged as `CatchAll`.\n   Classes tagged with `EXCLUDE` will also simply ignore unknown parameters. Note that classes tagged as `RAISE` still raise a `TypeError`, and **not** a `UndefinedParameterError` if supplied with unknown keywords.\n\n\n### Override the default encode / decode / marshmallow field of a specific field?\n\nSee [Overriding](#Overriding)\n\n### Handle recursive dataclasses?\nObject hierarchies where fields are of the type that they are declared within require a small\ntype hinting trick to declare the forward reference.\n```python\nfrom typing import Optional\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Tree():\n    value: str\n    left: Optional['Tree']\n    right: Optional['Tree']\n```\n\nAvoid using\n```python\nfrom __future__ import annotations\n```\nas it will cause problems with the way dataclasses_json accesses the type annotations.\n\n### Use numpy or pandas types?\nData types specific to libraries commonly used in data analysis and machine learning like [numpy](https://github.com/numpy/numpy) and [pandas](https://github.com/pandas-dev/pandas) are not supported by default, but you can easily enable them by using custom decoders and encoders. Below are two examples for `numpy` and `pandas` types.\n\n```python\nfrom dataclasses import field, dataclass\nfrom dataclasses_json import config, dataclass_json\nimport numpy as np\nimport pandas as pd\n\n@dataclass_json\n@dataclass\nclass DataWithNumpy:\n    my_int: np.int64 = field(metadata=config(decoder=np.int64))\n    my_float: np.float64 = field(metadata=config(decoder=np.float64))\n    my_array: np.ndarray = field(metadata=config(decoder=np.asarray))\nDataWithNumpy.from_json(\"{\\\"my_int\\\": 42, \\\"my_float\\\": 13.37, \\\"my_array\\\": [1,2,3]}\")\n\n@dataclass_json\n@dataclass\nclass DataWithPandas:\n    my_df: pd.DataFrame = field(metadata=config(decoder=pd.DataFrame.from_records, encoder=lambda x: x.to_dict(orient=\"records\")))\ndata = DataWithPandas.from_dict({\"my_df\": [{\"col1\": 1, \"col2\": 2}, {\"col1\": 3, \"col2\": 4}]})\n# my_df results in:\n# col1  col2\n# 1    2    \n# 3    4\ndata.to_dict()\n# {\"my_df\": [{\"col1\": 1, \"col2\": 2}, {\"col1\": 3, \"col2\": 4}]}\n```\n\n## Marshmallow interop\n\nUsing the `dataclass_json` decorator or mixing in `DataClassJsonMixin` will\nprovide you with an additional method `.schema()`.\n\n`.schema()` generates a schema exactly equivalent to manually creating a\nmarshmallow schema for your dataclass. You can reference the [marshmallow API docs](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nto learn other ways you can use the schema returned by `.schema()`.\n\nYou can pass in the exact same arguments to `.schema()` that you would when\nconstructing a `PersonSchema` instance, e.g. `.schema(many=True)`, and they will\nget passed through to the marshmallow schema.\n\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\n# You don't need to do this - it's generated for you by `.schema()`!\nfrom marshmallow import Schema, fields\n\nclass PersonSchema(Schema):\n    name = fields.Str()\n```\n\nBriefly, on what's going on under the hood in the above examples: calling \n`.schema()` will have this library generate a\n[marshmallow schema]('https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nfor you. It also fills in the corresponding object hook, so that marshmallow\nwill create an instance of your Data Class on `load` (e.g.\n`Person.schema().load` returns a `Person`) rather than a `dict`, which it does\nby default in marshmallow.\n\n**Performance note**\n\n`.schema()` is not cached (it generates the schema on every call), so if you\nhave a nested Data Class you may want to save the result to a variable to \navoid re-generation of the schema on every usage.\n\n```python\nperson_schema = Person.schema()\nperson_schema.dump(people, many=True)\n\n# later in the code...\n\nperson_schema.dump(person)\n```\n\n## Overriding / Extending\n\n#### Overriding\n\nFor example, you might want to encode/decode `datetime` objects using ISO format\nrather than the default `timestamp`.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import datetime\nfrom marshmallow import fields\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: datetime = field(\n        metadata=config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.DateTime(format='iso')\n        )\n    )\n```\n\n#### Extending\n\nSimilarly, you might want to extend `dataclasses_json` to encode `date` objects.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import date\nfrom marshmallow import fields\n\ndataclasses_json.cfg.global_config.encoders[date] = date.isoformat\ndataclasses_json.cfg.global_config.decoders[date] = date.fromisoformat\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: date\n    modified_at: date\n    accessed_at: date\n```\n\nAs you can see, you can **override** or **extend** the default codecs by providing a \"hook\" via a \ncallable:\n- `encoder`: a callable, which will be invoked to convert the field value when encoding to JSON\n- `decoder`: a callable, which will be invoked to convert the JSON value when decoding from JSON\n- `mm_field`: a marshmallow field, which will affect the behavior of any operations involving `.schema()`\n\nNote that these hooks will be invoked regardless if you're using \n`.to_json`/`dump`/`dumps`\nand `.from_json`/`load`/`loads`. So apply overrides / extensions judiciously, making sure to \ncarefully consider whether the interaction of the encode/decode/mm_field is consistent with what you expect!\n\n\n#### What if I have other dataclass field extensions that rely on `metadata`\n\nAll the `dataclasses_json.config` does is return a mapping, namespaced under the key `'dataclasses_json'`.\n\nSay there's another module, `other_dataclass_package` that uses metadata. Here's how you solve your problem:\n\n```python\nmetadata = {'other_dataclass_package': 'some metadata...'}  # pre-existing metadata for another dataclass package\ndataclass_json_config = config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.DateTime(format='iso')\n        )\nmetadata.update(dataclass_json_config)\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: datetime = field(metadata=metadata)\n```\n\nYou can also manually specify the dataclass_json configuration mapping.\n\n```python\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: date = field(\n        metadata={'dataclasses_json': {\n            'encoder': date.isoformat,\n            'decoder': date.fromisoformat,\n            'mm_field': fields.DateTime(format='iso')\n        }}\n    )\n```\n\n## A larger example\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\nfrom typing import List\n\n@dataclass_json\n@dataclass(frozen=True)\nclass Minion:\n    name: str\n\n\n@dataclass_json\n@dataclass(frozen=True)\nclass Boss:\n    minions: List[Minion]\n\nboss = Boss([Minion('evil minion'), Minion('very evil minion')])\nboss_json = \"\"\"\n{\n    \"minions\": [\n        {\n            \"name\": \"evil minion\"\n        },\n        {\n            \"name\": \"very evil minion\"\n        }\n    ]\n}\n\"\"\".strip()\n\nassert boss.to_json(indent=4) == boss_json\nassert Boss.from_json(boss_json) == boss\n```\n\n## Performance\n\nTake a look at [this issue](https://github.com/lidatong/dataclasses-json/issues/228)\n\n## Versioning\n\nNote this library is still pre-1.0.0 (SEMVER).\n\nThe current convention is:\n- **PATCH** version upgrades for bug fixes and minor feature additions.\n- **MINOR** version upgrades for big API features and breaking changes.\n\nOnce this library is 1.0.0, it will follow standard SEMVER conventions.\n\n### Python compatibility \n\nAny version that is not listed in the table below we do not test against, though you might still be able to install the library. For future Python versions, please open an issue and/or a pull request, adding them to the CI suite.\n\n\n| Python version range | Compatible dataclasses-json version |\n|----------------------|:-----------------------------------:|\n| 3.7.x - 3.12.x       |            0.5.x - 0.6.x            |\n| >= 3.13.x            |         No official support (yet)   |\n\n\n## Roadmap\n\nCurrently the focus is on investigating and fixing bugs in this library, working\non performance, and finishing [this issue](https://github.com/lidatong/dataclasses-json/issues/31).\n\nThat said, if you think there's a feature missing / something new needed in the\nlibrary, please see the contributing section below.\n\n\n## Contributing\n\nFirst of all, thank you for being interested in contributing to this library.\nI really appreciate you taking the time to work on this project.\n\n- If you're just interested in getting into the code, a good place to start are \nissues tagged as bugs.\n- If introducing a new feature, especially one that modifies the public API, \nconsider submitting an issue for discussion before a PR. Please also take a look \nat existing issues / PRs to see what you're proposing has  already been covered \nbefore / exists.\n- I like to follow the commit conventions documented [here](https://www.conventionalcommits.org/en/v1.0.0/#summary)\n\n### Setting up your environment\n\nThis project uses [Poetry](https://python-poetry.org/) for dependency and venv management. It is quite simple to get ready for your first commit:\n- [Install](https://python-poetry.org/docs/#installation) latest stable Poetry\n- Navigate to where you cloned `dataclasses-json`\n- Run `poetry install`\n- Create a branch and start writing code!\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/c9/68/92f0a56391423b0a0dd7c79c8da6e1feb86c6e656dad5413922c437d2bec/rez-2.113.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=5c69c1690359425f94ad2c85e3cda2f30a18895a948063ccc7d7b37ff937f973",
            "hashes": {
              "sha256": "5c69c1690359425f94ad2c85e3cda2f30a18895a948063ccc7d7b37ff937f973"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "rez",
          "version": "2.113.0",
          "summary": "A cross-platform packaging system that can build and install multiple version of packages, and dynamically configure resolved environments at runtime.",
          "description_content_type": "text/markdown",
          "keywords": [
            "package",
            "resolve",
            "version",
            "build",
            "install",
            "software",
            "management"
          ],
          "home_page": "https://github.com/AcademySoftwareFoundation/rez",
          "author": "Contributors to the rez project",
          "author_email": "rez-discussion@lists.aswf.io",
          "license": "Apache-2.0",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "License :: OSI Approved :: Apache Software License",
            "Intended Audience :: Developers",
            "Operating System :: OS Independent",
            "Programming Language :: Python",
            "Programming Language :: Python :: 2",
            "Programming Language :: Python :: 3",
            "Topic :: Software Development",
            "Topic :: System :: Software Distribution"
          ],
          "description": "[![Release](https://shields.io/github/v/release/AcademySoftwareFoundation/rez)](https://github.com/AcademySoftwareFoundation/rez/releases)\n[![Pypy Release](https://shields.io/pypi/v/rez)](https://pypi.org/project/rez)<br>\n[![Core](https://github.com/AcademySoftwareFoundation/rez/workflows/core/badge.svg?branch=main)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Acore+branch%3Amain)\n[![Ubuntu](https://github.com/AcademySoftwareFoundation/rez/workflows/ubuntu/badge.svg?branch=main)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Aubuntu+branch%3Amain)\n[![Mac](https://github.com/AcademySoftwareFoundation/rez/workflows/mac/badge.svg?branch=main)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Amac+branch%3Amain)\n[![Windows](https://github.com/AcademySoftwareFoundation/rez/workflows/windows/badge.svg?branch=main)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3AWindows+branch%3Amain)<br>\n[![Installation](https://github.com/AcademySoftwareFoundation/rez/workflows/installation/badge.svg?branch=main)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Ainstallation+branch%3Amain)\n[![Flake8](https://github.com/AcademySoftwareFoundation/rez/workflows/flake8/badge.svg?branch=main)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Aflake8+branch%3Amain)\n[![Wiki](https://github.com/AcademySoftwareFoundation/rez/workflows/wiki/badge.svg)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Awiki+event%3Arelease)\n[![Pypi](https://github.com/AcademySoftwareFoundation/rez/workflows/pypi/badge.svg)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Apypi+event%3Arelease)\n[![Benchmark](https://github.com/AcademySoftwareFoundation/rez/workflows/benchmark/badge.svg)](https://github.com/AcademySoftwareFoundation/rez/actions?query=workflow%3Abenchmark+event%3Arelease)<br>\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=AcademySoftwareFoundation_rez&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=AcademySoftwareFoundation_rez)\n[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=AcademySoftwareFoundation_rez&metric=bugs)](https://sonarcloud.io/summary/new_code?id=AcademySoftwareFoundation_rez)\n[![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=AcademySoftwareFoundation_rez&metric=vulnerabilities)](https://sonarcloud.io/summary/new_code?id=AcademySoftwareFoundation_rez)\n[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=AcademySoftwareFoundation_rez&metric=sqale_rating)](https://sonarcloud.io/summary/new_code?id=AcademySoftwareFoundation_rez)\n[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=AcademySoftwareFoundation_rez&metric=reliability_rating)](https://sonarcloud.io/summary/new_code?id=AcademySoftwareFoundation_rez)\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=AcademySoftwareFoundation_rez&metric=security_rating)](https://sonarcloud.io/summary/new_code?id=AcademySoftwareFoundation_rez)\n\n\n- [What Is Rez?](#what-is-rez)\n- [The Basics](#the-basics)\n- [Examples](#examples)\n- [Quickstart](#quickstart)\n- [Building Your First Package](#building-your-first-package)\n- [Features](#features)\n\n\n## What Is Rez?\n\nRez is a cross-platform package manager with a difference. Using Rez you can create\nstandalone environments configured for a given set of packages. However, unlike many\nother package managers, packages are not installed into these standalone environments.\nInstead, all package versions are installed into a central repository, and standalone\nenvironments reference these existing packages. This means that configured environments\nare lightweight, and very fast to create, often taking just a few seconds to configure\ndespite containing hundreds of packages.\n\nSee [the wiki](https://github.com/AcademySoftwareFoundation/rez/wiki) for full documentation.\n\n<p align=\"center\">\n<a href=\"https://github.com/AcademySoftwareFoundation/rez/wiki/media/other_pkg_mgr.png\">\n<img src=\"https://github.com/AcademySoftwareFoundation/rez/wiki/media/other_pkg_mgr.png\"></a>\n<br><i>Typical package managers install packages into an environment</i>\n</p>\n\n<br>\n<p align=\"center\">\n<a href=\"https://github.com/AcademySoftwareFoundation/rez/wiki/media/rez_pkg_mgr.png\">\n<img src=\"https://github.com/AcademySoftwareFoundation/rez/wiki/media/rez_pkg_mgr.png\"></a>\n<br><i>Rez installs packages once, and configures environments dynamically</i>\n</p>\n\n<br>\nRez takes a list of package requests, and constructs the target environment, resolving\nall the necessary package dependencies. Any type of software package is supported -\ncompiled, python, applications and libraries.\n\n\n## The Basics\n\nPackages are stored in repositories on disk. Each package has a single concise\ndefinition file (*package.py*) that defines its dependencies, its commands (how it\nconfigures the environment containing it), and other metadata. For example, the\nfollowing is the package definition file for the popular *requests* python module:\n\n    name = \"requests\"\n\n    version = \"2.8.1\"\n\n    authors = [\"Kenneth Reitz\"]\n\n    requires = [\n        \"python-2.7+\"\n    ]\n\n    def commands():\n        env.PYTHONPATH.append(\"{root}/python\")\n\nThis package requires python-2.7 or greater. When used, the 'python' subdirectory\nwithin its install location is appended to the PYTHONPATH environment variable.\n\nWhen an environment is created with the rez API or *rez-env* tool, a dependency\nresolution algorithm tracks package requirements and resolves to a list of needed\npackages. The commands from these packages are concatenated and evaluated, resulting\nin a configured environment. Rez is able to configure environments containing\nhundreds of packages, often within a few seconds. Resolves can also be saved to file,\nand when re-evaluated later will reconstruct the same environment once more.\n\n\n## Examples\n\nThis example places the user into a resolved shell containing the requested packages,\nusing the [rez-env](https://github.com/AcademySoftwareFoundation/rez/wiki/Command-Line-Tools#rez-env) tool:\n\n    ]$ rez-env requests-2.2+ python-2.6 'pymongo-0+<2.7'\n\n    You are now in a rez-configured environment.\n\n    resolved by ajohns@nn188.somewhere.com, on Wed Feb 26 15:56:20 2014, using Rez v2.0.0\n\n    requested packages:\n    requests-2.2+\n    python-2.6\n    pymongo-0+<2.7\n\n    resolved packages:\n    python-2.6.8    /software/ext/python/2.6.8\n    platform-linux  /software/ext/platform/linux\n    requests-2.2.1  /software/ext/requests/2.2.1/python-2.6\n    pymongo-2.6.3   /software/ext/pymongo/2.6.3\n    arch-x86_64     /software/ext/arch/x86_64\n\n    > ]$ _\n\nThis example creates an environment containing the package 'houdini' version 12.5\nor greater, and runs the command 'hescape -h' inside that environment:\n\n    ]$ rez-env houdini-12.5+ -- hescape -h\n    Usage: hescape [-foreground] [-s editor] [filename ...]\n    -h: output this usage message\n    -s: specify starting desktop by name\n    -foreground: starts process in foreground\n\nResolved environments can also be created via the API:\n\n    >>> import subprocess\n    >>> from rez.resolved_context import ResolvedContext\n    >>>\n    >>> r = ResolvedContext([\"houdini-12.5+\", \"houdini-0+<13\", \"java\", \"!java-1.8+\"])\n    >>> p = r.execute_shell(command='which hescape', stdout=subprocess.PIPE)\n    >>> out, err = p.communicate()\n    >>>\n    >>> print(out)\n    '/software/ext/houdini/12.5.562/bin/hescape'\n\n\n## Quickstart\n\nFirst, install Rez. Download the source, and from the source directory, run\n(with DEST_DIR replaced with your install location):\n\n    ]$ python ./install.py -v DEST_DIR\n\nThis installs the Rez command line tools. It will print a message at the end\ntelling you how to use Rez when the installation has completed. Rez is not a\nnormal Python package and so you do not typically install it with pip or setup.py.\nDo *not* move the installation - re-install to a new location if you want to\nchange the install path. If you want to install rez for multiple operating\nsystems, perform separate installs for each of those systems.\n\nNext, you need to create some essential Rez packages. The *rez-bind* tool creates\nRez packages that are based on software already installed on your system. Try\nbinding the following list of packages (note that for Python, you may need\nadministrative privileges):\n\n    ]$ rez-bind platform\n    ]$ rez-bind arch\n    ]$ rez-bind os\n    ]$ rez-bind python\n\nNow you should be able to create an environment containing Python. Try this:\n\n    ]$ rez-env python -- which python\n    /home/ajohns/packages/python-2.7.8/platform-linux/arch-x86_64/os-Ubuntu-12.04/bin/python\n\n\n## Building Your First Package\n\nThe *rez-build* tool is used to build packages and install them locally (typically\nto *$HOME/packages*). Once you've done that, you can use them via *rez-env*, just\nlike any other package:\n\n    ]$ cd example_packages/hello_world\n    ]$ rez-build --install\n    ...\n    ]$ rez-env hello_world -- hello\n    Hello world!\n\n\n## Features\n\n* Supports Linux, OSX and Windows;\n* Allows for a fast and efficient build-install-test cycle;\n* Creates shells of type: bash, tcsh, other (shells can be added as plugins);\n* Contains a deployment system supporting git, mercurial and svn (as plugins);\n* Environment resolves can be saved to disk and reused at a later date (a bit\n  like VirtualEnv);\n* Highly pluggable, supports five different plugin types to do things from\n  adding new shell types, to adding new build systems;\n* Contains a version resolving algorithm, for avoiding version clashes;\n* Visualises resolved environments in a rendered dot-graph;\n* Packages are found in a search path, so different packages can be deployed\n  to different locations;\n* Supports alphanumeric version numbers;\n* Has a powerful version requirements syntax, able to describe any version\n  range, and a conflict operator for rejecting version ranges;\n* Package 'variants' - a way to define different flavors of the same package\n  version, for example a plugin built for multiple versions of the host app;\n* Custom release hooks (such as post-release operations) can be added as plugins;\n* Has a time lock feature, which allows old resolves to be recreated (newer\n  packages are ignored);\n* Package definitions are a single, succinct file;\n* Packages define their effect on the environment (adding to PATH etc) in a\n  platform- and shell- agnostic way, using a dedicated python API;\n* Has a memcached-based caching system, for caching environment resolves;\n* Has a package filtering feature, allowing for staged package releases such as\n  alpha and beta packages.\n\n## Known issues and limitations\n\n* Currently CMake builds do not function on Windows with Rez and\n  the related tests are skipped. A fix requires multiple changes that are on\n  the roadmap. Users have successfully implemented workarounds to utilize\n  CMake with Rez under Windows, but the goal is to provide a seamless experience\n  on any platform in the future. For details see this [issue](/../../issues/703)\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/be/2a/4e62ff633612f746f88618852a626bbe24226eba5e7ac90e91dcfd6a414e/rich-13.6.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=2b38e2fe9ca72c9a00170a1a2d20c63c790d0e10ef1fe35eba76e1e7b1d7d245",
            "hashes": {
              "sha256": "2b38e2fe9ca72c9a00170a1a2d20c63c790d0e10ef1fe35eba76e1e7b1d7d245"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "rich",
          "version": "13.6.0",
          "summary": "Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal",
          "description_content_type": "text/markdown",
          "home_page": "https://github.com/Textualize/rich",
          "author": "Will McGugan",
          "author_email": "willmcgugan@gmail.com",
          "license": "MIT",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Environment :: Console",
            "Framework :: IPython",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Operating System :: MacOS",
            "Operating System :: Microsoft :: Windows",
            "Operating System :: POSIX :: Linux",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
            "Typing :: Typed"
          ],
          "requires_dist": [
            "ipywidgets (>=7.5.1,<9) ; extra == \"jupyter\"",
            "markdown-it-py (>=2.2.0)",
            "pygments (>=2.13.0,<3.0.0)",
            "typing-extensions (>=4.0.0,<5.0) ; python_version < \"3.9\""
          ],
          "requires_python": ">=3.7.0",
          "project_url": [
            "Documentation, https://rich.readthedocs.io/en/latest/"
          ],
          "provides_extra": [
            "jupyter"
          ],
          "description": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)\n • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)\n • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\n\nRich is a Python library for _rich_ text and beautiful formatting in the terminal.\n\nThe [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nFor a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\nSee what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibility\n\nRich works with Linux, OSX, and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.7 or later.\n\nRich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.\n\n## Installing\n\nInstall with `pip` or your favorite PyPI package manager.\n\n```sh\npython -m pip install rich\n```\n\nRun the following to test Rich output on your terminal:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nTo effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Using the Console\n\nFor more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nThe Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nAs you might expect, this will print `\"Hello World!\"` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.\n\nThere are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nThe output will be something like the following:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nThat's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nYou can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.\n\n## Rich Inspect\n\nRich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nSee the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.\n\n# Rich Library\n\nRich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.\n\nClick the following headings for details:\n\n<details>\n<summary>Log</summary>\n\nThe Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nThe above produces the following output:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNote the `log_locals` argument, which outputs a table containing the local variables where the log method was called.\n\nThe log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nYou can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nTo insert an emoji in to console output place the name between two colons. Here's an example:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nPlease use this feature wisely.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nRich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nThe animation above was generated with [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) in the examples directory.\n\nHere's a simpler table example:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nThis produces the following output:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNote that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).\n\nThe `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nRich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.\n\nFor basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nIt's not much harder to add multiple progress bars. Here's an example taken from the docs:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nThe columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nTo try this out yourself, see [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nFor situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nThis generates the following output in the terminal.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nThe spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:\n\n```\npython -m rich.spinner\n```\n\nThe above command generates the following output in the terminal:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.\n\nThe labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:\n\n```\npython -m rich.tree\n```\n\nThis generates the following output:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nSee the [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.\n\n</details>\n\n<details>\n<summary>Columns</summary>\n\nRich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nThe following screenshot is the output from the [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.\n\nTo render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nThis will produce output something like the following:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nRich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nThis will produce the following output:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.\n\nHere's what it looks like on OSX (similar on Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nAll Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.\n\n# Rich CLI\n\n\nSee also [Rich CLI](https://github.com/textualize/rich-cli) for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n# Textual\n\nSee also Rich's sister project, [Textual](https://github.com/Textualize/textual), which you can use to build sophisticated User Interfaces in the terminal.\n\n![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)\n\n# Projects using Rich\n\nFor some examples of projects using Rich, see the [Rich Gallery](https://www.textualize.io/rich/gallery) on [Textualize.io](https://www.textualize.io).\n\nWould you like to add your own project to the gallery? You can! Follow [these instructions](https://www.textualize.io/gallery-instructions).\n\n<!-- This is a test, no need to translate -->\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/76/ac/a7305707cb852b7e16ff80eaf5692309bde30e2b1100a1fcacdc8f731d97/aiosignal-1.3.1-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=f8376fb07dd1e86a584e4fcdec80b36b7f81aac666ebc724e2c090300dd83b17",
            "hashes": {
              "sha256": "f8376fb07dd1e86a584e4fcdec80b36b7f81aac666ebc724e2c090300dd83b17"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "aiosignal",
          "version": "1.3.1",
          "summary": "aiosignal: a list of registered asynchronous callbacks",
          "description_content_type": "text/x-rst",
          "home_page": "https://github.com/aio-libs/aiosignal",
          "maintainer": "aiohttp team <team@aiohttp.org>",
          "maintainer_email": "team@aiohttp.org",
          "license": "Apache 2.0",
          "classifier": [
            "License :: OSI Approved :: Apache Software License",
            "Intended Audience :: Developers",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Development Status :: 5 - Production/Stable",
            "Operating System :: POSIX",
            "Operating System :: MacOS :: MacOS X",
            "Operating System :: Microsoft :: Windows",
            "Framework :: AsyncIO"
          ],
          "requires_dist": [
            "frozenlist (>=1.1.0)"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Chat: Gitter, https://gitter.im/aio-libs/Lobby",
            "CI: GitHub Actions, https://github.com/aio-libs/aiosignal/actions",
            "Coverage: codecov, https://codecov.io/github/aio-libs/aiosignal",
            "Docs: RTD, https://docs.aiosignal.org",
            "GitHub: issues, https://github.com/aio-libs/aiosignal/issues",
            "GitHub: repo, https://github.com/aio-libs/aiosignal"
          ],
          "description": "=========\naiosignal\n=========\n\n.. image:: https://github.com/aio-libs/aiosignal/workflows/CI/badge.svg\n   :target: https://github.com/aio-libs/aiosignal/actions?query=workflow%3ACI\n   :alt: GitHub status for master branch\n\n.. image:: https://codecov.io/gh/aio-libs/aiosignal/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/aio-libs/aiosignal\n   :alt: codecov.io status for master branch\n\n.. image:: https://badge.fury.io/py/aiosignal.svg\n   :target: https://pypi.org/project/aiosignal\n   :alt: Latest PyPI package version\n\n.. image:: https://readthedocs.org/projects/aiosignal/badge/?version=latest\n   :target: https://aiosignal.readthedocs.io/\n   :alt: Latest Read The Docs\n\n.. image:: https://img.shields.io/discourse/topics?server=https%3A%2F%2Faio-libs.discourse.group%2F\n   :target: https://aio-libs.discourse.group/\n   :alt: Discourse group for io-libs\n\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :target: https://gitter.im/aio-libs/Lobby\n   :alt: Chat on Gitter\n\nIntroduction\n============\n\nA project to manage callbacks in `asyncio` projects.\n\n``Signal`` is a list of registered asynchronous callbacks.\n\nThe signal's life-cycle has two stages: after creation its content\ncould be filled by using standard list operations: ``sig.append()``\netc.\n\nAfter you call ``sig.freeze()`` the signal is *frozen*: adding, removing\nand dropping callbacks is forbidden.\n\nThe only available operation is calling the previously registered\ncallbacks by using ``await sig.send(data)``.\n\nFor concrete usage examples see the `Signals\n<https://docs.aiohttp.org/en/stable/web_advanced.html#aiohttp-web-signals>\nsection of the `Web Server Advanced\n<https://docs.aiohttp.org/en/stable/web_advanced.html>` chapter of the `aiohttp\ndocumentation`_.\n\n\nInstallation\n------------\n\n::\n\n   $ pip install aiosignal\n\nThe library requires Python 3.6 or newer.\n\n\nDocumentation\n=============\n\nhttps://aiosignal.readthedocs.io/\n\nCommunication channels\n======================\n\n*gitter chat* https://gitter.im/aio-libs/Lobby\n\nRequirements\n============\n\n- Python >= 3.6\n- frozenlist >= 1.0.0\n\nLicense\n=======\n\n``aiosignal`` is offered under the Apache 2 license.\n\nSource code\n===========\n\nThe project is hosted on GitHub_\n\nPlease file an issue in the `bug tracker\n<https://github.com/aio-libs/aiosignal/issues>`_ if you have found a bug\nor have some suggestions to improve the library.\n\n.. _GitHub: https://github.com/aio-libs/aiosignal\n.. _aiohttp documentation: https://docs.aiohttp.org/\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/a7/fa/e01228c2938de91d47b307831c62ab9e4001e747789d0b05baf779a6488c/async_timeout-4.0.3-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=7405140ff1230c310e51dc27b3145b9092d659ce68ff733fb0cefe3ee42be028",
            "hashes": {
              "sha256": "7405140ff1230c310e51dc27b3145b9092d659ce68ff733fb0cefe3ee42be028"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "async-timeout",
          "version": "4.0.3",
          "summary": "Timeout context manager for asyncio programs",
          "description_content_type": "text/x-rst",
          "home_page": "https://github.com/aio-libs/async-timeout",
          "author": "Andrew Svetlov <andrew.svetlov@gmail.com>",
          "author_email": "andrew.svetlov@gmail.com",
          "license": "Apache 2",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Topic :: Software Development :: Libraries",
            "Framework :: AsyncIO",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11"
          ],
          "requires_dist": [
            "typing-extensions >=3.6.5 ; python_version < \"3.8\""
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Chat: Gitter, https://gitter.im/aio-libs/Lobby",
            "CI: GitHub Actions, https://github.com/aio-libs/async-timeout/actions",
            "Coverage: codecov, https://codecov.io/github/aio-libs/async-timeout",
            "GitHub: issues, https://github.com/aio-libs/async-timeout/issues",
            "GitHub: repo, https://github.com/aio-libs/async-timeout"
          ],
          "description": "async-timeout\n=============\n.. image:: https://travis-ci.com/aio-libs/async-timeout.svg?branch=master\n    :target: https://travis-ci.com/aio-libs/async-timeout\n.. image:: https://codecov.io/gh/aio-libs/async-timeout/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/async-timeout\n.. image:: https://img.shields.io/pypi/v/async-timeout.svg\n    :target: https://pypi.python.org/pypi/async-timeout\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n    :target: https://gitter.im/aio-libs/Lobby\n    :alt: Chat on Gitter\n\nasyncio-compatible timeout context manager.\n\n\nUsage example\n-------------\n\n\nThe context manager is useful in cases when you want to apply timeout\nlogic around block of code or in cases when ``asyncio.wait_for()`` is\nnot suitable. Also it's much faster than ``asyncio.wait_for()``\nbecause ``timeout`` doesn't create a new task.\n\nThe ``timeout(delay, *, loop=None)`` call returns a context manager\nthat cancels a block on *timeout* expiring::\n\n   from async_timeout import timeout\n   async with timeout(1.5):\n       await inner()\n\n1. If ``inner()`` is executed faster than in ``1.5`` seconds nothing\n   happens.\n2. Otherwise ``inner()`` is cancelled internally by sending\n   ``asyncio.CancelledError`` into but ``asyncio.TimeoutError`` is\n   raised outside of context manager scope.\n\n*timeout* parameter could be ``None`` for skipping timeout functionality.\n\n\nAlternatively, ``timeout_at(when)`` can be used for scheduling\nat the absolute time::\n\n   loop = asyncio.get_event_loop()\n   now = loop.time()\n\n   async with timeout_at(now + 1.5):\n       await inner()\n\n\nPlease note: it is not POSIX time but a time with\nundefined starting base, e.g. the time of the system power on.\n\n\nContext manager has ``.expired`` property for check if timeout happens\nexactly in context manager::\n\n   async with timeout(1.5) as cm:\n       await inner()\n   print(cm.expired)\n\nThe property is ``True`` if ``inner()`` execution is cancelled by\ntimeout context manager.\n\nIf ``inner()`` call explicitly raises ``TimeoutError`` ``cm.expired``\nis ``False``.\n\nThe scheduled deadline time is available as ``.deadline`` property::\n\n   async with timeout(1.5) as cm:\n       cm.deadline\n\nNot finished yet timeout can be rescheduled by ``shift_by()``\nor ``shift_to()`` methods::\n\n   async with timeout(1.5) as cm:\n       cm.shift(1)  # add another second on waiting\n       cm.update(loop.time() + 5)  # reschedule to now+5 seconds\n\nRescheduling is forbidden if the timeout is expired or after exit from ``async with``\ncode block.\n\n\nInstallation\n------------\n\n::\n\n   $ pip install async-timeout\n\nThe library is Python 3 only!\n\n\n\nAuthors and License\n-------------------\n\nThe module is written by Andrew Svetlov.\n\nIt's *Apache 2* licensed and freely available.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/f0/eb/fcb708c7bf5056045e9e98f62b93bd7467eb718b0202e7698eb11d66416c/attrs-23.1.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=1f28b4522cdc2fb4256ac1a020c78acf9cba2c6b461ccd2c126f3aa8e8335d04",
            "hashes": {
              "sha256": "1f28b4522cdc2fb4256ac1a020c78acf9cba2c6b461ccd2c126f3aa8e8335d04"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "attrs",
          "version": "23.1.0",
          "summary": "Classes Without Boilerplate",
          "description_content_type": "text/markdown",
          "keywords": [
            "attribute",
            "boilerplate",
            "class"
          ],
          "author_email": "Hynek Schlawack <hs@ox.cx>",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: Implementation :: CPython",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Typing :: Typed"
          ],
          "requires_dist": [
            "importlib-metadata; python_version < '3.8'",
            "attrs[tests]; extra == 'cov'",
            "coverage[toml]>=5.3; extra == 'cov'",
            "attrs[docs,tests]; extra == 'dev'",
            "pre-commit; extra == 'dev'",
            "furo; extra == 'docs'",
            "myst-parser; extra == 'docs'",
            "sphinx; extra == 'docs'",
            "sphinx-notfound-page; extra == 'docs'",
            "sphinxcontrib-towncrier; extra == 'docs'",
            "towncrier; extra == 'docs'",
            "zope-interface; extra == 'docs'",
            "attrs[tests-no-zope]; extra == 'tests'",
            "zope-interface; extra == 'tests'",
            "cloudpickle; platform_python_implementation == 'CPython' and extra == 'tests-no-zope'",
            "hypothesis; extra == 'tests-no-zope'",
            "mypy>=1.1.1; platform_python_implementation == 'CPython' and extra == 'tests-no-zope'",
            "pympler; extra == 'tests-no-zope'",
            "pytest-mypy-plugins; platform_python_implementation == 'CPython' and python_version < '3.11' and extra == 'tests-no-zope'",
            "pytest-xdist[psutil]; extra == 'tests-no-zope'",
            "pytest>=4.3.0; extra == 'tests-no-zope'"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Documentation, https://www.attrs.org/",
            "Changelog, https://www.attrs.org/en/stable/changelog.html",
            "Bug Tracker, https://github.com/python-attrs/attrs/issues",
            "Source Code, https://github.com/python-attrs/attrs",
            "Funding, https://github.com/sponsors/hynek",
            "Tidelift, https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=pypi"
          ],
          "provides_extra": [
            "cov",
            "dev",
            "docs",
            "tests",
            "tests-no-zope"
          ],
          "description": "<p align=\"center\">\n  <a href=\"https://www.attrs.org/\">\n    <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg\" width=\"35%\" alt=\"attrs\" />\n  </a>\n</p>\n\n\n*attrs* is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).\n[Trusted by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for Mars missions since 2020!\n\nIts main goal is to help you to write **concise** and **correct** software without slowing down your code.\n\n\n## Sponsors\n\n*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).\nEspecially those generously supporting us at the *The Organization* tier and higher:\n\n<p align=\"center\">\n   <a href=\"https://www.variomedia.de/\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Variomedia.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n\n   <a href=\"https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Tidelift.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n\n   <a href=\"https://sentry.io/\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Sentry.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n\n   <a href=\"https://filepreviews.io/\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/FilePreviews.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n</p>\n\n<p align=\"center\">\n   <strong>Please consider <a href=\"https://github.com/sponsors/hynek\">joining them</a> to help make <em>attrs</em>’s maintenance more sustainable!</strong>\n</p>\n\n<!-- teaser-end -->\n\n## Example\n\n*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:\n\n<!-- code-begin -->\n\n```pycon\n>>> from attrs import asdict, define, make_class, Factory\n\n>>> @define\n... class SomeClass:\n...     a_number: int = 42\n...     list_of_numbers: list[int] = Factory(list)\n...\n...     def hard_math(self, another_number):\n...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n>>> sc = SomeClass(1, [1, 2, 3])\n>>> sc\nSomeClass(a_number=1, list_of_numbers=[1, 2, 3])\n\n>>> sc.hard_math(3)\n19\n>>> sc == SomeClass(1, [1, 2, 3])\nTrue\n>>> sc != SomeClass(2, [3, 2, 1])\nTrue\n\n>>> asdict(sc)\n{'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n>>> SomeClass()\nSomeClass(a_number=42, list_of_numbers=[])\n\n>>> C = make_class(\"C\", [\"a\", \"b\"])\n>>> C(\"foo\", \"bar\")\nC(a='foo', b='bar')\n```\n\nAfter *declaring* your attributes, *attrs* gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable `__repr__`,\n- equality-checking methods,\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\n**Hate type annotations**!?\nNo problem!\nTypes are entirely **optional** with *attrs*.\nSimply assign `attrs.field()` to the attributes instead of annotating them with types.\n\n---\n\nThis example uses *attrs*'s modern APIs that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.\nThe classic APIs (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.\n\nPlease check out [*On The Core API Names*](https://www.attrs.org/en/latest/names.html) for a more in-depth explanation.\n\n\n## Data Classes\n\nOn the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).\nIn practice it does a lot more and is more flexible.\nFor instance it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).\n\nFor more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).\n\n\n## Project Information\n\n- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)\n- [**Documentation**](https://www.attrs.org/)\n- [**PyPI**](https://pypi.org/project/attrs/)\n- [**Source Code**](https://github.com/python-attrs/attrs)\n- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)\n- [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)\n- **License**: [MIT](https://www.attrs.org/en/latest/license.html)\n- **Get Help**: please use the `python-attrs` tag on [StackOverflow](https://stackoverflow.com/questions/tagged/python-attrs)\n- **Supported Python Versions**: 3.7 and later\n\n\n### *attrs* for Enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of *attrs* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n[Learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## Release Information\n\n### Backwards-incompatible Changes\n\n- Python 3.6 has been dropped and packaging switched to static package data using [Hatch](https://hatch.pypa.io/latest/).\n  [#993](https://github.com/python-attrs/attrs/issues/993)\n\n\n### Deprecations\n\n- The support for *zope-interface* via the `attrs.validators.provides` validator is now deprecated and will be removed in, or after, April 2024.\n\n  The presence of a C-based package in our developement dependencies has caused headaches and we're not under the impression it's used a lot.\n\n  Let us know if you're using it and we might publish it as a separate package.\n  [#1120](https://github.com/python-attrs/attrs/issues/1120)\n\n\n### Changes\n\n- `attrs.filters.exclude()` and `attrs.filters.include()` now support the passing of attribute names as strings.\n  [#1068](https://github.com/python-attrs/attrs/issues/1068)\n- `attrs.has()` and `attrs.fields()` now handle generic classes correctly.\n  [#1079](https://github.com/python-attrs/attrs/issues/1079)\n- Fix frozen exception classes when raised within e.g. `contextlib.contextmanager`, which mutates their `__traceback__` attributes.\n  [#1081](https://github.com/python-attrs/attrs/issues/1081)\n- `@frozen` now works with type checkers that implement [PEP-681](https://peps.python.org/pep-0681/) (ex. [pyright](https://github.com/microsoft/pyright/)).\n  [#1084](https://github.com/python-attrs/attrs/issues/1084)\n- Restored ability to unpickle instances pickled before 22.2.0.\n  [#1085](https://github.com/python-attrs/attrs/issues/1085)\n- `attrs.asdict()`'s and `attrs.astuple()`'s type stubs now accept the `attrs.AttrsInstance` protocol.\n  [#1090](https://github.com/python-attrs/attrs/issues/1090)\n- Fix slots class cellvar updating closure in CPython 3.8+ even when `__code__` introspection is unavailable.\n  [#1092](https://github.com/python-attrs/attrs/issues/1092)\n- `attrs.resolve_types()` can now pass `include_extras` to `typing.get_type_hints()` on Python 3.9+, and does so by default.\n  [#1099](https://github.com/python-attrs/attrs/issues/1099)\n- Added instructions for pull request workflow to `CONTRIBUTING.md`.\n  [#1105](https://github.com/python-attrs/attrs/issues/1105)\n- Added *type* parameter to `attrs.field()` function for use with `attrs.make_class()`.\n\n  Please note that type checkers ignore type metadata passed into `make_class()`, but it can be useful if you're wrapping _attrs_.\n  [#1107](https://github.com/python-attrs/attrs/issues/1107)\n- It is now possible for `attrs.evolve()` (and `attr.evolve()`) to change fields named `inst` if the instance is passed as a positional argument.\n\n  Passing the instance using the `inst` keyword argument is now deprecated and will be removed in, or after, April 2024.\n  [#1117](https://github.com/python-attrs/attrs/issues/1117)\n- `attrs.validators.optional()` now also accepts a tuple of validators (in addition to lists of validators).\n  [#1122](https://github.com/python-attrs/attrs/issues/1122)\n\n\n\n---\n\n[Full changelog](https://www.attrs.org/en/stable/changelog.html)\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/2f/0e/d7303ccae9735ff8ff01e36705ad6233ad2002962e8668a970fc000c5e1b/charset_normalizer-3.3.2-cp39-cp39-win_amd64.whl",
          "archive_info": {
            "hash": "sha256=b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d",
            "hashes": {
              "sha256": "b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "charset-normalizer",
          "version": "3.3.2",
          "summary": "The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.",
          "description_content_type": "text/markdown",
          "keywords": [
            "encoding",
            "charset",
            "charset-detector",
            "detector",
            "normalization",
            "unicode",
            "chardet",
            "detect"
          ],
          "home_page": "https://github.com/Ousret/charset_normalizer",
          "author": "Ahmed TAHRI",
          "author_email": "ahmed.tahri@cloudnursery.dev",
          "license": "MIT",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "License :: OSI Approved :: MIT License",
            "Intended Audience :: Developers",
            "Topic :: Software Development :: Libraries :: Python Modules",
            "Operating System :: OS Independent",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Topic :: Text Processing :: Linguistic",
            "Topic :: Utilities",
            "Typing :: Typed"
          ],
          "requires_python": ">=3.7.0",
          "project_url": [
            "Bug Reports, https://github.com/Ousret/charset_normalizer/issues",
            "Documentation, https://charset-normalizer.readthedocs.io/en/latest"
          ],
          "provides_extra": [
            "unicode_backport"
          ],
          "description": "<h1 align=\"center\">Charset Detection, for Everyone 👋</h1>\r\n\r\n<p align=\"center\">\r\n  <sup>The Real First Universal Charset Detector</sup><br>\r\n  <a href=\"https://pypi.org/project/charset-normalizer\">\r\n    <img src=\"https://img.shields.io/pypi/pyversions/charset_normalizer.svg?orange=blue\" />\r\n  </a>\r\n  <a href=\"https://pepy.tech/project/charset-normalizer/\">\r\n    <img alt=\"Download Count Total\" src=\"https://static.pepy.tech/badge/charset-normalizer/month\" />\r\n  </a>\r\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/7297\">\r\n    <img src=\"https://bestpractices.coreinfrastructure.org/projects/7297/badge\">\r\n  </a>\r\n</p>\r\n<p align=\"center\">\r\n  <sup><i>Featured Packages</i></sup><br>\r\n  <a href=\"https://github.com/jawah/niquests\">\r\n   <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Niquests-HTTP_1.1%2C%202%2C_and_3_Client-cyan\">\r\n  </a>\r\n  <a href=\"https://github.com/jawah/wassima\">\r\n   <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Wassima-Certifi_Killer-cyan\">\r\n  </a>\r\n</p>\r\n<p align=\"center\">\r\n  <sup><i>In other language (unofficial port - by the community)</i></sup><br>\r\n  <a href=\"https://github.com/nickspring/charset-normalizer-rs\">\r\n   <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Rust-red\">\r\n  </a>\r\n</p>\r\n\r\n> A library that helps you read text from an unknown charset encoding.<br /> Motivated by `chardet`,\r\n> I'm trying to resolve the issue by taking a new approach.\r\n> All IANA character set names for which the Python core library provides codecs are supported.\r\n\r\n<p align=\"center\">\r\n  >>>>> <a href=\"https://charsetnormalizerweb.ousret.now.sh\" target=\"_blank\">👉 Try Me Online Now, Then Adopt Me 👈 </a> <<<<<\r\n</p>\r\n\r\nThis project offers you an alternative to **Universal Charset Encoding Detector**, also known as **Chardet**.\r\n\r\n| Feature                                          | [Chardet](https://github.com/chardet/chardet) |                                         Charset Normalizer                                         | [cChardet](https://github.com/PyYoshi/cChardet) |\r\n|--------------------------------------------------|:---------------------------------------------:|:--------------------------------------------------------------------------------------------------:|:-----------------------------------------------:|\r\n| `Fast`                                           |                       ❌                       |                                                 ✅                                                  |                        ✅                        |\r\n| `Universal**`                                    |                       ❌                       |                                                 ✅                                                  |                        ❌                        |\r\n| `Reliable` **without** distinguishable standards |                       ❌                       |                                                 ✅                                                  |                        ✅                        |\r\n| `Reliable` **with** distinguishable standards    |                       ✅                       |                                                 ✅                                                  |                        ✅                        |\r\n| `License`                                        |           LGPL-2.1<br>_restrictive_           |                                                MIT                                                 |            MPL-1.1<br>_restrictive_             |\r\n| `Native Python`                                  |                       ✅                       |                                                 ✅                                                  |                        ❌                        |\r\n| `Detect spoken language`                         |                       ❌                       |                                                 ✅                                                  |                       N/A                       |\r\n| `UnicodeDecodeError Safety`                      |                       ❌                       |                                                 ✅                                                  |                        ❌                        |\r\n| `Whl Size (min)`                                 |                   193.6 kB                    |                                               42 kB                                                |                     ~200 kB                     |\r\n| `Supported Encoding`                             |                      33                       | 🎉 [99](https://charset-normalizer.readthedocs.io/en/latest/user/support.html#supported-encodings) |                       40                        |\r\n\r\n<p align=\"center\">\r\n<img src=\"https://i.imgflip.com/373iay.gif\" alt=\"Reading Normalized Text\" width=\"226\"/><img src=\"https://media.tenor.com/images/c0180f70732a18b4965448d33adba3d0/tenor.gif\" alt=\"Cat Reading Text\" width=\"200\"/>\r\n</p>\r\n\r\n*\\*\\* : They are clearly using specific code for a specific encoding even if covering most of used one*<br> \r\nDid you got there because of the logs? See [https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html](https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html)\r\n\r\n## ⚡ Performance\r\n\r\nThis package offer better performance than its counterpart Chardet. Here are some numbers.\r\n\r\n| Package                                       | Accuracy | Mean per file (ms) | File per sec (est) |\r\n|-----------------------------------------------|:--------:|:------------------:|:------------------:|\r\n| [chardet](https://github.com/chardet/chardet) |   86 %   |       200 ms       |     5 file/sec     |\r\n| charset-normalizer                            | **98 %** |     **10 ms**      |    100 file/sec    |\r\n\r\n| Package                                       | 99th percentile | 95th percentile | 50th percentile |\r\n|-----------------------------------------------|:---------------:|:---------------:|:---------------:|\r\n| [chardet](https://github.com/chardet/chardet) |     1200 ms     |     287 ms      |      23 ms      |\r\n| charset-normalizer                            |     100 ms      |      50 ms      |      5 ms       |\r\n\r\nChardet's performance on larger file (1MB+) are very poor. Expect huge difference on large payload.\r\n\r\n> Stats are generated using 400+ files using default parameters. More details on used files, see GHA workflows.\r\n> And yes, these results might change at any time. The dataset can be updated to include more files.\r\n> The actual delays heavily depends on your CPU capabilities. The factors should remain the same.\r\n> Keep in mind that the stats are generous and that Chardet accuracy vs our is measured using Chardet initial capability\r\n> (eg. Supported Encoding) Challenge-them if you want.\r\n\r\n## ✨ Installation\r\n\r\nUsing pip:\r\n\r\n```sh\r\npip install charset-normalizer -U\r\n```\r\n\r\n## 🚀 Basic Usage\r\n\r\n### CLI\r\nThis package comes with a CLI.\r\n\r\n```\r\nusage: normalizer [-h] [-v] [-a] [-n] [-m] [-r] [-f] [-t THRESHOLD]\r\n                  file [file ...]\r\n\r\nThe Real First Universal Charset Detector. Discover originating encoding used\r\non text file. Normalize text to unicode.\r\n\r\npositional arguments:\r\n  files                 File(s) to be analysed\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v, --verbose         Display complementary information about file if any.\r\n                        Stdout will contain logs about the detection process.\r\n  -a, --with-alternative\r\n                        Output complementary possibilities if any. Top-level\r\n                        JSON WILL be a list.\r\n  -n, --normalize       Permit to normalize input file. If not set, program\r\n                        does not write anything.\r\n  -m, --minimal         Only output the charset detected to STDOUT. Disabling\r\n                        JSON output.\r\n  -r, --replace         Replace file when trying to normalize it instead of\r\n                        creating a new one.\r\n  -f, --force           Replace file without asking if you are sure, use this\r\n                        flag with caution.\r\n  -t THRESHOLD, --threshold THRESHOLD\r\n                        Define a custom maximum amount of chaos allowed in\r\n                        decoded content. 0. <= chaos <= 1.\r\n  --version             Show version information and exit.\r\n```\r\n\r\n```bash\r\nnormalizer ./data/sample.1.fr.srt\r\n```\r\n\r\nor\r\n\r\n```bash\r\npython -m charset_normalizer ./data/sample.1.fr.srt\r\n```\r\n\r\n🎉 Since version 1.4.0 the CLI produce easily usable stdout result in JSON format.\r\n\r\n```json\r\n{\r\n    \"path\": \"/home/default/projects/charset_normalizer/data/sample.1.fr.srt\",\r\n    \"encoding\": \"cp1252\",\r\n    \"encoding_aliases\": [\r\n        \"1252\",\r\n        \"windows_1252\"\r\n    ],\r\n    \"alternative_encodings\": [\r\n        \"cp1254\",\r\n        \"cp1256\",\r\n        \"cp1258\",\r\n        \"iso8859_14\",\r\n        \"iso8859_15\",\r\n        \"iso8859_16\",\r\n        \"iso8859_3\",\r\n        \"iso8859_9\",\r\n        \"latin_1\",\r\n        \"mbcs\"\r\n    ],\r\n    \"language\": \"French\",\r\n    \"alphabets\": [\r\n        \"Basic Latin\",\r\n        \"Latin-1 Supplement\"\r\n    ],\r\n    \"has_sig_or_bom\": false,\r\n    \"chaos\": 0.149,\r\n    \"coherence\": 97.152,\r\n    \"unicode_path\": null,\r\n    \"is_preferred\": true\r\n}\r\n```\r\n\r\n### Python\r\n*Just print out normalized text*\r\n```python\r\nfrom charset_normalizer import from_path\r\n\r\nresults = from_path('./my_subtitle.srt')\r\n\r\nprint(str(results.best()))\r\n```\r\n\r\n*Upgrade your code without effort*\r\n```python\r\nfrom charset_normalizer import detect\r\n```\r\n\r\nThe above code will behave the same as **chardet**. We ensure that we offer the best (reasonable) BC result possible.\r\n\r\nSee the docs for advanced usage : [readthedocs.io](https://charset-normalizer.readthedocs.io/en/latest/)\r\n\r\n## 😇 Why\r\n\r\nWhen I started using Chardet, I noticed that it was not suited to my expectations, and I wanted to propose a\r\nreliable alternative using a completely different method. Also! I never back down on a good challenge!\r\n\r\nI **don't care** about the **originating charset** encoding, because **two different tables** can\r\nproduce **two identical rendered string.**\r\nWhat I want is to get readable text, the best I can. \r\n\r\nIn a way, **I'm brute forcing text decoding.** How cool is that ? 😎\r\n\r\nDon't confuse package **ftfy** with charset-normalizer or chardet. ftfy goal is to repair unicode string whereas charset-normalizer to convert raw file in unknown encoding to unicode.\r\n\r\n## 🍰 How\r\n\r\n  - Discard all charset encoding table that could not fit the binary content.\r\n  - Measure noise, or the mess once opened (by chunks) with a corresponding charset encoding.\r\n  - Extract matches with the lowest mess detected.\r\n  - Additionally, we measure coherence / probe for a language.\r\n\r\n**Wait a minute**, what is noise/mess and coherence according to **YOU ?**\r\n\r\n*Noise :* I opened hundred of text files, **written by humans**, with the wrong encoding table. **I observed**, then\r\n**I established** some ground rules about **what is obvious** when **it seems like** a mess.\r\n I know that my interpretation of what is noise is probably incomplete, feel free to contribute in order to\r\n improve or rewrite it.\r\n\r\n*Coherence :* For each language there is on earth, we have computed ranked letter appearance occurrences (the best we can). So I thought\r\nthat intel is worth something here. So I use those records against decoded text to check if I can detect intelligent design.\r\n\r\n## ⚡ Known limitations\r\n\r\n  - Language detection is unreliable when text contains two or more languages sharing identical letters. (eg. HTML (english tags) + Turkish content (Sharing Latin characters))\r\n  - Every charset detector heavily depends on sufficient content. In common cases, do not bother run detection on very tiny content.\r\n\r\n## ⚠️ About Python EOLs\r\n\r\n**If you are running:**\r\n\r\n- Python >=2.7,<3.5: Unsupported\r\n- Python 3.5: charset-normalizer < 2.1\r\n- Python 3.6: charset-normalizer < 3.1\r\n- Python 3.7: charset-normalizer < 4.0\r\n\r\nUpgrade your Python interpreter as soon as possible.\r\n\r\n## 👤 Contributing\r\n\r\nContributions, issues and feature requests are very much welcome.<br />\r\nFeel free to check [issues page](https://github.com/ousret/charset_normalizer/issues) if you want to contribute.\r\n\r\n## 📝 License\r\n\r\nCopyright © [Ahmed TAHRI @Ousret](https://github.com/Ousret).<br />\r\nThis project is [MIT](https://github.com/Ousret/charset_normalizer/blob/master/LICENSE) licensed.\r\n\r\nCharacters frequencies used in this project © 2012 [Denny Vrandečić](http://simia.net/letters/)\r\n\r\n## 💼 For Enterprise\r\n\r\nProfessional support for charset-normalizer is available as part of the [Tidelift\r\nSubscription][1]. Tidelift gives software development teams a single source for\r\npurchasing and maintaining their software, with professional grade assurances\r\nfrom the experts who know it best, while seamlessly integrating with existing\r\ntools.\r\n\r\n[1]: https://tidelift.com/subscription/pkg/pypi-charset-normalizer?utm_source=pypi-charset-normalizer&utm_medium=readme\r\n\r\n# Changelog\r\nAll notable changes to charset-normalizer will be documented in this file. This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\r\n\r\n## [3.3.2](https://github.com/Ousret/charset_normalizer/compare/3.3.1...3.3.2) (2023-10-31)\r\n\r\n### Fixed\r\n- Unintentional memory usage regression when using large payload that match several encoding (#376)\r\n- Regression on some detection case showcased in the documentation (#371)\r\n\r\n### Added\r\n- Noise (md) probe that identify malformed arabic representation due to the presence of letters in isolated form (credit to my wife)\r\n\r\n## [3.3.1](https://github.com/Ousret/charset_normalizer/compare/3.3.0...3.3.1) (2023-10-22)\r\n\r\n### Changed\r\n- Optional mypyc compilation upgraded to version 1.6.1 for Python >= 3.8\r\n- Improved the general detection reliability based on reports from the community\r\n\r\n## [3.3.0](https://github.com/Ousret/charset_normalizer/compare/3.2.0...3.3.0) (2023-09-30)\r\n\r\n### Added\r\n- Allow to execute the CLI (e.g. normalizer) through `python -m charset_normalizer.cli` or `python -m charset_normalizer`\r\n- Support for 9 forgotten encoding that are supported by Python but unlisted in `encoding.aliases` as they have no alias (#323)\r\n\r\n### Removed\r\n- (internal) Redundant utils.is_ascii function and unused function is_private_use_only\r\n- (internal) charset_normalizer.assets is moved inside charset_normalizer.constant\r\n\r\n### Changed\r\n- (internal) Unicode code blocks in constants are updated using the latest v15.0.0 definition to improve detection\r\n- Optional mypyc compilation upgraded to version 1.5.1 for Python >= 3.8\r\n\r\n### Fixed\r\n- Unable to properly sort CharsetMatch when both chaos/noise and coherence were close due to an unreachable condition in \\_\\_lt\\_\\_ (#350)\r\n\r\n## [3.2.0](https://github.com/Ousret/charset_normalizer/compare/3.1.0...3.2.0) (2023-06-07)\r\n\r\n### Changed\r\n- Typehint for function `from_path` no longer enforce `PathLike` as its first argument\r\n- Minor improvement over the global detection reliability\r\n\r\n### Added\r\n- Introduce function `is_binary` that relies on main capabilities, and optimized to detect binaries\r\n- Propagate `enable_fallback` argument throughout `from_bytes`, `from_path`, and `from_fp` that allow a deeper control over the detection (default True)\r\n- Explicit support for Python 3.12\r\n\r\n### Fixed\r\n- Edge case detection failure where a file would contain 'very-long' camel cased word (Issue #289)\r\n\r\n## [3.1.0](https://github.com/Ousret/charset_normalizer/compare/3.0.1...3.1.0) (2023-03-06)\r\n\r\n### Added\r\n- Argument `should_rename_legacy` for legacy function `detect` and disregard any new arguments without errors (PR #262)\r\n\r\n### Removed\r\n- Support for Python 3.6 (PR #260)\r\n\r\n### Changed\r\n- Optional speedup provided by mypy/c 1.0.1\r\n\r\n## [3.0.1](https://github.com/Ousret/charset_normalizer/compare/3.0.0...3.0.1) (2022-11-18)\r\n\r\n### Fixed\r\n- Multi-bytes cutter/chunk generator did not always cut correctly (PR #233)\r\n\r\n### Changed\r\n- Speedup provided by mypy/c 0.990 on Python >= 3.7\r\n\r\n## [3.0.0](https://github.com/Ousret/charset_normalizer/compare/2.1.1...3.0.0) (2022-10-20)\r\n\r\n### Added\r\n- Extend the capability of explain=True when cp_isolation contains at most two entries (min one), will log in details of the Mess-detector results\r\n- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES\r\n- Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp` to adjust the minimum expected coherence ratio\r\n- `normalizer --version` now specify if current version provide extra speedup (meaning mypyc compilation whl)\r\n\r\n### Changed\r\n- Build with static metadata using 'build' frontend\r\n- Make the language detection stricter\r\n- Optional: Module `md.py` can be compiled using Mypyc to provide an extra speedup up to 4x faster than v2.1\r\n\r\n### Fixed\r\n- CLI with opt --normalize fail when using full path for files\r\n- TooManyAccentuatedPlugin induce false positive on the mess detection when too few alpha character have been fed to it\r\n- Sphinx warnings when generating the documentation\r\n\r\n### Removed\r\n- Coherence detector no longer return 'Simple English' instead return 'English'\r\n- Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'\r\n- Breaking: Method `first()` and `best()` from CharsetMatch\r\n- UTF-7 will no longer appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict with ASCII)\r\n- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches\r\n- Breaking: Top-level function `normalize`\r\n- Breaking: Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from CharsetMatch\r\n- Support for the backport `unicodedata2`\r\n\r\n## [3.0.0rc1](https://github.com/Ousret/charset_normalizer/compare/3.0.0b2...3.0.0rc1) (2022-10-18)\r\n\r\n### Added\r\n- Extend the capability of explain=True when cp_isolation contains at most two entries (min one), will log in details of the Mess-detector results\r\n- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES\r\n- Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp` to adjust the minimum expected coherence ratio\r\n\r\n### Changed\r\n- Build with static metadata using 'build' frontend\r\n- Make the language detection stricter\r\n\r\n### Fixed\r\n- CLI with opt --normalize fail when using full path for files\r\n- TooManyAccentuatedPlugin induce false positive on the mess detection when too few alpha character have been fed to it\r\n\r\n### Removed\r\n- Coherence detector no longer return 'Simple English' instead return 'English'\r\n- Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'\r\n\r\n## [3.0.0b2](https://github.com/Ousret/charset_normalizer/compare/3.0.0b1...3.0.0b2) (2022-08-21)\r\n\r\n### Added\r\n- `normalizer --version` now specify if current version provide extra speedup (meaning mypyc compilation whl)\r\n\r\n### Removed\r\n- Breaking: Method `first()` and `best()` from CharsetMatch\r\n- UTF-7 will no longer appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict with ASCII)\r\n\r\n### Fixed\r\n- Sphinx warnings when generating the documentation\r\n\r\n## [3.0.0b1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...3.0.0b1) (2022-08-15)\r\n\r\n### Changed\r\n- Optional: Module `md.py` can be compiled using Mypyc to provide an extra speedup up to 4x faster than v2.1\r\n\r\n### Removed\r\n- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches\r\n- Breaking: Top-level function `normalize`\r\n- Breaking: Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from CharsetMatch\r\n- Support for the backport `unicodedata2`\r\n\r\n## [2.1.1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...2.1.1) (2022-08-19)\r\n\r\n### Deprecated\r\n- Function `normalize` scheduled for removal in 3.0\r\n\r\n### Changed\r\n- Removed useless call to decode in fn is_unprintable (#206)\r\n\r\n### Fixed\r\n- Third-party library (i18n xgettext) crashing not recognizing utf_8 (PEP 263) with underscore from [@aleksandernovikov](https://github.com/aleksandernovikov) (#204)\r\n\r\n## [2.1.0](https://github.com/Ousret/charset_normalizer/compare/2.0.12...2.1.0) (2022-06-19)\r\n\r\n### Added\r\n- Output the Unicode table version when running the CLI with `--version` (PR #194)\r\n\r\n### Changed\r\n- Re-use decoded buffer for single byte character sets from [@nijel](https://github.com/nijel) (PR #175)\r\n- Fixing some performance bottlenecks from [@deedy5](https://github.com/deedy5) (PR #183)\r\n\r\n### Fixed\r\n- Workaround potential bug in cpython with Zero Width No-Break Space located in Arabic Presentation Forms-B, Unicode 1.1 not acknowledged as space (PR #175)\r\n- CLI default threshold aligned with the API threshold from [@oleksandr-kuzmenko](https://github.com/oleksandr-kuzmenko) (PR #181)\r\n\r\n### Removed\r\n- Support for Python 3.5 (PR #192)\r\n\r\n### Deprecated\r\n- Use of backport unicodedata from `unicodedata2` as Python is quickly catching up, scheduled for removal in 3.0 (PR #194)\r\n\r\n## [2.0.12](https://github.com/Ousret/charset_normalizer/compare/2.0.11...2.0.12) (2022-02-12)\r\n\r\n### Fixed\r\n- ASCII miss-detection on rare cases (PR #170) \r\n\r\n## [2.0.11](https://github.com/Ousret/charset_normalizer/compare/2.0.10...2.0.11) (2022-01-30)\r\n\r\n### Added\r\n- Explicit support for Python 3.11 (PR #164)\r\n\r\n### Changed\r\n- The logging behavior have been completely reviewed, now using only TRACE and DEBUG levels (PR #163 #165)\r\n\r\n## [2.0.10](https://github.com/Ousret/charset_normalizer/compare/2.0.9...2.0.10) (2022-01-04)\r\n\r\n### Fixed\r\n- Fallback match entries might lead to UnicodeDecodeError for large bytes sequence (PR #154)\r\n\r\n### Changed\r\n- Skipping the language-detection (CD) on ASCII (PR #155)\r\n\r\n## [2.0.9](https://github.com/Ousret/charset_normalizer/compare/2.0.8...2.0.9) (2021-12-03)\r\n\r\n### Changed\r\n- Moderating the logging impact (since 2.0.8) for specific environments (PR #147)\r\n\r\n### Fixed\r\n- Wrong logging level applied when setting kwarg `explain` to True (PR #146)\r\n\r\n## [2.0.8](https://github.com/Ousret/charset_normalizer/compare/2.0.7...2.0.8) (2021-11-24)\r\n### Changed\r\n- Improvement over Vietnamese detection (PR #126)\r\n- MD improvement on trailing data and long foreign (non-pure latin) data (PR #124)\r\n- Efficiency improvements in cd/alphabet_languages from [@adbar](https://github.com/adbar) (PR #122)\r\n- call sum() without an intermediary list following PEP 289 recommendations from [@adbar](https://github.com/adbar) (PR #129)\r\n- Code style as refactored by Sourcery-AI (PR #131) \r\n- Minor adjustment on the MD around european words (PR #133)\r\n- Remove and replace SRTs from assets / tests (PR #139)\r\n- Initialize the library logger with a `NullHandler` by default from [@nmaynes](https://github.com/nmaynes) (PR #135)\r\n- Setting kwarg `explain` to True will add provisionally (bounded to function lifespan) a specific stream handler (PR #135)\r\n\r\n### Fixed\r\n- Fix large (misleading) sequence giving UnicodeDecodeError (PR #137)\r\n- Avoid using too insignificant chunk (PR #137)\r\n\r\n### Added\r\n- Add and expose function `set_logging_handler` to configure a specific StreamHandler from [@nmaynes](https://github.com/nmaynes) (PR #135)\r\n- Add `CHANGELOG.md` entries, format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) (PR #141)\r\n\r\n## [2.0.7](https://github.com/Ousret/charset_normalizer/compare/2.0.6...2.0.7) (2021-10-11)\r\n### Added\r\n- Add support for Kazakh (Cyrillic) language detection (PR #109)\r\n\r\n### Changed\r\n- Further, improve inferring the language from a given single-byte code page (PR #112)\r\n- Vainly trying to leverage PEP263 when PEP3120 is not supported (PR #116)\r\n- Refactoring for potential performance improvements in loops from [@adbar](https://github.com/adbar) (PR #113)\r\n- Various detection improvement (MD+CD) (PR #117)\r\n\r\n### Removed\r\n- Remove redundant logging entry about detected language(s) (PR #115)\r\n\r\n### Fixed\r\n- Fix a minor inconsistency between Python 3.5 and other versions regarding language detection (PR #117 #102)\r\n\r\n## [2.0.6](https://github.com/Ousret/charset_normalizer/compare/2.0.5...2.0.6) (2021-09-18)\r\n### Fixed\r\n- Unforeseen regression with the loss of the backward-compatibility with some older minor of Python 3.5.x (PR #100)\r\n- Fix CLI crash when using --minimal output in certain cases (PR #103)\r\n\r\n### Changed\r\n- Minor improvement to the detection efficiency (less than 1%) (PR #106 #101)\r\n\r\n## [2.0.5](https://github.com/Ousret/charset_normalizer/compare/2.0.4...2.0.5) (2021-09-14)\r\n### Changed\r\n- The project now comply with: flake8, mypy, isort and black to ensure a better overall quality (PR #81)\r\n- The BC-support with v1.x was improved, the old staticmethods are restored (PR #82)\r\n- The Unicode detection is slightly improved (PR #93)\r\n- Add syntax sugar \\_\\_bool\\_\\_ for results CharsetMatches list-container (PR #91)\r\n\r\n### Removed\r\n- The project no longer raise warning on tiny content given for detection, will be simply logged as warning instead (PR #92)\r\n\r\n### Fixed\r\n- In some rare case, the chunks extractor could cut in the middle of a multi-byte character and could mislead the mess detection (PR #95)\r\n- Some rare 'space' characters could trip up the UnprintablePlugin/Mess detection (PR #96)\r\n- The MANIFEST.in was not exhaustive (PR #78)\r\n\r\n## [2.0.4](https://github.com/Ousret/charset_normalizer/compare/2.0.3...2.0.4) (2021-07-30)\r\n### Fixed\r\n- The CLI no longer raise an unexpected exception when no encoding has been found (PR #70)\r\n- Fix accessing the 'alphabets' property when the payload contains surrogate characters (PR #68)\r\n- The logger could mislead (explain=True) on detected languages and the impact of one MBCS match (PR #72)\r\n- Submatch factoring could be wrong in rare edge cases (PR #72)\r\n- Multiple files given to the CLI were ignored when publishing results to STDOUT. (After the first path) (PR #72)\r\n- Fix line endings from CRLF to LF for certain project files (PR #67)\r\n\r\n### Changed\r\n- Adjust the MD to lower the sensitivity, thus improving the global detection reliability (PR #69 #76)\r\n- Allow fallback on specified encoding if any (PR #71)\r\n\r\n## [2.0.3](https://github.com/Ousret/charset_normalizer/compare/2.0.2...2.0.3) (2021-07-16)\r\n### Changed\r\n- Part of the detection mechanism has been improved to be less sensitive, resulting in more accurate detection results. Especially ASCII. (PR #63)\r\n- According to the community wishes, the detection will fall back on ASCII or UTF-8 in a last-resort case. (PR #64)\r\n\r\n## [2.0.2](https://github.com/Ousret/charset_normalizer/compare/2.0.1...2.0.2) (2021-07-15)\r\n### Fixed\r\n- Empty/Too small JSON payload miss-detection fixed. Report from [@tseaver](https://github.com/tseaver) (PR #59) \r\n\r\n### Changed\r\n- Don't inject unicodedata2 into sys.modules from [@akx](https://github.com/akx) (PR #57)\r\n\r\n## [2.0.1](https://github.com/Ousret/charset_normalizer/compare/2.0.0...2.0.1) (2021-07-13)\r\n### Fixed\r\n- Make it work where there isn't a filesystem available, dropping assets frequencies.json. Report from [@sethmlarson](https://github.com/sethmlarson). (PR #55)\r\n- Using explain=False permanently disable the verbose output in the current runtime (PR #47)\r\n- One log entry (language target preemptive) was not show in logs when using explain=True (PR #47)\r\n- Fix undesired exception (ValueError) on getitem of instance CharsetMatches (PR #52)\r\n\r\n### Changed\r\n- Public function normalize default args values were not aligned with from_bytes (PR #53)\r\n\r\n### Added\r\n- You may now use charset aliases in cp_isolation and cp_exclusion arguments (PR #47)\r\n\r\n## [2.0.0](https://github.com/Ousret/charset_normalizer/compare/1.4.1...2.0.0) (2021-07-02)\r\n### Changed\r\n- 4x to 5 times faster than the previous 1.4.0 release. At least 2x faster than Chardet.\r\n- Accent has been made on UTF-8 detection, should perform rather instantaneous.\r\n- The backward compatibility with Chardet has been greatly improved. The legacy detect function returns an identical charset name whenever possible.\r\n- The detection mechanism has been slightly improved, now Turkish content is detected correctly (most of the time)\r\n- The program has been rewritten to ease the readability and maintainability. (+Using static typing)+\r\n- utf_7 detection has been reinstated.\r\n\r\n### Removed\r\n- This package no longer require anything when used with Python 3.5 (Dropped cached_property)\r\n- Removed support for these languages: Catalan, Esperanto, Kazakh, Baque, Volapük, Azeri, Galician, Nynorsk, Macedonian, and Serbocroatian.\r\n- The exception hook on UnicodeDecodeError has been removed.\r\n\r\n### Deprecated\r\n- Methods coherence_non_latin, w_counter, chaos_secondary_pass of the class CharsetMatch are now deprecated and scheduled for removal in v3.0\r\n\r\n### Fixed\r\n- The CLI output used the relative path of the file(s). Should be absolute.\r\n\r\n## [1.4.1](https://github.com/Ousret/charset_normalizer/compare/1.4.0...1.4.1) (2021-05-28)\r\n### Fixed\r\n- Logger configuration/usage no longer conflict with others (PR #44)\r\n\r\n## [1.4.0](https://github.com/Ousret/charset_normalizer/compare/1.3.9...1.4.0) (2021-05-21)\r\n### Removed\r\n- Using standard logging instead of using the package loguru.\r\n- Dropping nose test framework in favor of the maintained pytest.\r\n- Choose to not use dragonmapper package to help with gibberish Chinese/CJK text.\r\n- Require cached_property only for Python 3.5 due to constraint. Dropping for every other interpreter version.\r\n- Stop support for UTF-7 that does not contain a SIG.\r\n- Dropping PrettyTable, replaced with pure JSON output in CLI.\r\n\r\n### Fixed\r\n- BOM marker in a CharsetNormalizerMatch instance could be False in rare cases even if obviously present. Due to the sub-match factoring process.\r\n- Not searching properly for the BOM when trying utf32/16 parent codec.\r\n\r\n### Changed\r\n- Improving the package final size by compressing frequencies.json.\r\n- Huge improvement over the larges payload.\r\n\r\n### Added\r\n- CLI now produces JSON consumable output.\r\n- Return ASCII if given sequences fit. Given reasonable confidence.\r\n\r\n## [1.3.9](https://github.com/Ousret/charset_normalizer/compare/1.3.8...1.3.9) (2021-05-13)\r\n\r\n### Fixed\r\n- In some very rare cases, you may end up getting encode/decode errors due to a bad bytes payload (PR #40)\r\n\r\n## [1.3.8](https://github.com/Ousret/charset_normalizer/compare/1.3.7...1.3.8) (2021-05-12)\r\n\r\n### Fixed\r\n- Empty given payload for detection may cause an exception if trying to access the `alphabets` property. (PR #39)\r\n\r\n## [1.3.7](https://github.com/Ousret/charset_normalizer/compare/1.3.6...1.3.7) (2021-05-12)\r\n\r\n### Fixed\r\n- The legacy detect function should return UTF-8-SIG if sig is present in the payload. (PR #38)\r\n\r\n## [1.3.6](https://github.com/Ousret/charset_normalizer/compare/1.3.5...1.3.6) (2021-02-09)\r\n\r\n### Changed\r\n- Amend the previous release to allow prettytable 2.0 (PR #35)\r\n\r\n## [1.3.5](https://github.com/Ousret/charset_normalizer/compare/1.3.4...1.3.5) (2021-02-08)\r\n\r\n### Fixed\r\n- Fix error while using the package with a python pre-release interpreter (PR #33)\r\n\r\n### Changed\r\n- Dependencies refactoring, constraints revised.\r\n\r\n### Added\r\n- Add python 3.9 and 3.10 to the supported interpreters\r\n\r\nMIT License\r\n\r\nCopyright (c) 2019 TAHRI Ahmed R.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/f9/16/ef36f5b20ee10dba86d4b5223d55b416e97dfa2dbf5546f0c6d9aa8a26ba/frozenlist-1.4.0-cp39-cp39-win_amd64.whl",
          "archive_info": {
            "hash": "sha256=6221d84d463fb110bdd7619b69cb43878a11d51cbb9394ae3105d082d5199167",
            "hashes": {
              "sha256": "6221d84d463fb110bdd7619b69cb43878a11d51cbb9394ae3105d082d5199167"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "frozenlist",
          "version": "1.4.0",
          "summary": "A list-like structure which implements collections.abc.MutableSequence",
          "description_content_type": "text/x-rst",
          "home_page": "https://github.com/aio-libs/frozenlist",
          "maintainer": "aiohttp team <team@aiohttp.org>",
          "maintainer_email": "team@aiohttp.org",
          "license": "Apache 2",
          "classifier": [
            "License :: OSI Approved :: Apache Software License",
            "Intended Audience :: Developers",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Development Status :: 5 - Production/Stable",
            "Operating System :: POSIX",
            "Operating System :: MacOS :: MacOS X",
            "Operating System :: Microsoft :: Windows"
          ],
          "requires_python": ">=3.8",
          "project_url": [
            "Chat: Matrix, https://matrix.to/#/#aio-libs:matrix.org",
            "Chat: Matrix Space, https://matrix.to/#/#aio-libs-space:matrix.org",
            "CI: Github Actions, https://github.com/aio-libs/frozenlist/actions",
            "Code of Conduct, https://github.com/aio-libs/.github/blob/master/CODE_OF_CONDUCT.md",
            "Coverage: codecov, https://codecov.io/github/aio-libs/frozenlist",
            "Docs: Changelog, https://github.com/aio-libs/frozenlist/blob/master/CHANGES.rst#changelog",
            "Docs: RTD, https://frozenlist.aio-libs.org",
            "GitHub: issues, https://github.com/aio-libs/frozenlist/issues",
            "GitHub: repo, https://github.com/aio-libs/frozenlist"
          ],
          "description": "==========\r\nfrozenlist\r\n==========\r\n\r\n.. image:: https://github.com/aio-libs/frozenlist/workflows/CI/badge.svg\r\n   :target: https://github.com/aio-libs/frozenlist/actions\r\n   :alt: GitHub status for master branch\r\n\r\n.. image:: https://codecov.io/gh/aio-libs/frozenlist/branch/master/graph/badge.svg\r\n   :target: https://codecov.io/gh/aio-libs/frozenlist\r\n   :alt: codecov.io status for master branch\r\n\r\n.. image:: https://img.shields.io/pypi/v/frozenlist.svg?logo=Python&logoColor=white\r\n   :target: https://pypi.org/project/frozenlist\r\n   :alt: frozenlist @ PyPI\r\n\r\n.. image:: https://readthedocs.org/projects/frozenlist/badge/?version=latest\r\n   :target: https://frozenlist.aio-libs.org\r\n   :alt: Read The Docs build status badge\r\n\r\n.. image:: https://img.shields.io/matrix/aio-libs:matrix.org?label=Discuss%20on%20Matrix%20at%20%23aio-libs%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\r\n   :target: https://matrix.to/#/%23aio-libs:matrix.org\r\n   :alt: Matrix Room — #aio-libs:matrix.org\r\n\r\n.. image:: https://img.shields.io/matrix/aio-libs-space:matrix.org?label=Discuss%20on%20Matrix%20at%20%23aio-libs-space%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\r\n   :target: https://matrix.to/#/%23aio-libs-space:matrix.org\r\n   :alt: Matrix Space — #aio-libs-space:matrix.org\r\n\r\nIntroduction\r\n============\r\n\r\n``frozenlist.FrozenList`` is a list-like structure which implements\r\n``collections.abc.MutableSequence``. The list is *mutable* until ``FrozenList.freeze``\r\nis called, after which list modifications raise ``RuntimeError``:\r\n\r\n\r\n>>> from frozenlist import FrozenList\r\n>>> fl = FrozenList([17, 42])\r\n>>> fl.append('spam')\r\n>>> fl.append('Vikings')\r\n>>> fl\r\n<FrozenList(frozen=False, [17, 42, 'spam', 'Vikings'])>\r\n>>> fl.freeze()\r\n>>> fl\r\n<FrozenList(frozen=True, [17, 42, 'spam', 'Vikings'])>\r\n>>> fl.frozen\r\nTrue\r\n>>> fl.append(\"Monty\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"frozenlist/_frozenlist.pyx\", line 97, in frozenlist._frozenlist.FrozenList.append\r\n    self._check_frozen()\r\n  File \"frozenlist/_frozenlist.pyx\", line 19, in frozenlist._frozenlist.FrozenList._check_frozen\r\n    raise RuntimeError(\"Cannot modify frozen list.\")\r\nRuntimeError: Cannot modify frozen list.\r\n\r\n\r\nFrozenList is also hashable, but only when frozen. Otherwise it also throws a RuntimeError:\r\n\r\n\r\n>>> fl = FrozenList([17, 42, 'spam'])\r\n>>> hash(fl)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"frozenlist/_frozenlist.pyx\", line 111, in frozenlist._frozenlist.FrozenList.__hash__\r\n    raise RuntimeError(\"Cannot hash unfrozen list.\")\r\nRuntimeError: Cannot hash unfrozen list.\r\n>>> fl.freeze()\r\n>>> hash(fl)\r\n3713081631934410656\r\n>>> dictionary = {fl: 'Vikings'} # frozen fl can be a dict key\r\n>>> dictionary\r\n{<FrozenList(frozen=True, [1, 2])>: 'Vikings'}\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n::\r\n\r\n   $ pip install frozenlist\r\n\r\nThe library requires Python 3.8 or newer.\r\n\r\n\r\nDocumentation\r\n=============\r\n\r\nhttps://frozenlist.aio-libs.org\r\n\r\nCommunication channels\r\n======================\r\n\r\nWe have a *Matrix Space* `#aio-libs-space:matrix.org\r\n<https://matrix.to/#/%23aio-libs-space:matrix.org>`_ which is\r\nalso accessible via Gitter.\r\n\r\nRequirements\r\n============\r\n\r\n- Python >= 3.8\r\n\r\nLicense\r\n=======\r\n\r\n``frozenlist`` is offered under the Apache 2 license.\r\n\r\nSource code\r\n===========\r\n\r\nThe project is hosted on GitHub_\r\n\r\nPlease file an issue in the `bug tracker\r\n<https://github.com/aio-libs/frozenlist/issues>`_ if you have found a bug\r\nor have some suggestions to improve the library.\r\n\r\n.. _GitHub: https://github.com/aio-libs/frozenlist\r\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/42/d7/1ec15b46af6af88f19b8e5ffea08fa375d433c998b8a7639e76935c14f1f/markdown_it_py-3.0.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1",
            "hashes": {
              "sha256": "355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "markdown-it-py",
          "version": "3.0.0",
          "summary": "Python port of markdown-it. Markdown parsing, done right!",
          "description_content_type": "text/markdown",
          "keywords": [
            "markdown",
            "lexer",
            "parser",
            "commonmark",
            "markdown-it"
          ],
          "author_email": "Chris Sewell <chrisj_sewell@hotmail.com>",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: Implementation :: CPython",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Topic :: Software Development :: Libraries :: Python Modules",
            "Topic :: Text Processing :: Markup"
          ],
          "requires_dist": [
            "mdurl~=0.1",
            "psutil ; extra == \"benchmarking\"",
            "pytest ; extra == \"benchmarking\"",
            "pytest-benchmark ; extra == \"benchmarking\"",
            "pre-commit~=3.0 ; extra == \"code_style\"",
            "commonmark~=0.9 ; extra == \"compare\"",
            "markdown~=3.4 ; extra == \"compare\"",
            "mistletoe~=1.0 ; extra == \"compare\"",
            "mistune~=2.0 ; extra == \"compare\"",
            "panflute~=2.3 ; extra == \"compare\"",
            "linkify-it-py>=1,<3 ; extra == \"linkify\"",
            "mdit-py-plugins ; extra == \"plugins\"",
            "gprof2dot ; extra == \"profiling\"",
            "mdit-py-plugins ; extra == \"rtd\"",
            "myst-parser ; extra == \"rtd\"",
            "pyyaml ; extra == \"rtd\"",
            "sphinx ; extra == \"rtd\"",
            "sphinx-copybutton ; extra == \"rtd\"",
            "sphinx-design ; extra == \"rtd\"",
            "sphinx_book_theme ; extra == \"rtd\"",
            "jupyter_sphinx ; extra == \"rtd\"",
            "coverage ; extra == \"testing\"",
            "pytest ; extra == \"testing\"",
            "pytest-cov ; extra == \"testing\"",
            "pytest-regressions ; extra == \"testing\""
          ],
          "requires_python": ">=3.8",
          "project_url": [
            "Documentation, https://markdown-it-py.readthedocs.io",
            "Homepage, https://github.com/executablebooks/markdown-it-py"
          ],
          "provides_extra": [
            "benchmarking",
            "code_style",
            "compare",
            "linkify",
            "plugins",
            "profiling",
            "rtd",
            "testing"
          ],
          "description": "# markdown-it-py\n\n[![Github-CI][github-ci]][github-link]\n[![Coverage Status][codecov-badge]][codecov-link]\n[![PyPI][pypi-badge]][pypi-link]\n[![Conda][conda-badge]][conda-link]\n[![Code style: black][black-badge]][black-link]\n[![PyPI - Downloads][install-badge]][install-link]\n\n> Markdown parser done right.\n\n- Follows the __[CommonMark spec](http://spec.commonmark.org/)__ for baseline parsing\n- Configurable syntax: you can add new rules and even replace existing ones.\n- Pluggable: Adds syntax extensions to extend the parser (see the [plugin list][md-plugins]).\n- High speed (see our [benchmarking tests][md-performance])\n- [Safe by default][md-security]\n- Member of [Google's Assured Open Source Software](https://cloud.google.com/assured-open-source-software/docs/supported-packages)\n\nThis is a Python port of [markdown-it], and some of its associated plugins.\nFor more details see: <https://markdown-it-py.readthedocs.io>.\n\nFor details on [markdown-it] itself, see:\n\n- The __[Live demo](https://markdown-it.github.io)__\n- [The markdown-it README][markdown-it-readme]\n\n## Installation\n\n```bash\nconda install -c conda-forge markdown-it-py\n```\n\nor\n\n```bash\npip install markdown-it-py[plugins]\n```\n\nor with extras\n\n```bash\nconda install -c conda-forge markdown-it-py linkify-it-py mdit-py-plugins\npip install markdown-it-py[linkify,plugins]\n```\n\n## Usage\n\n### Python API Usage\n\nRender markdown to HTML with markdown-it-py and a custom configuration\nwith and without plugins and features:\n\n```python\nfrom markdown_it import MarkdownIt\nfrom mdit_py_plugins.front_matter import front_matter_plugin\nfrom mdit_py_plugins.footnote import footnote_plugin\n\nmd = (\n    MarkdownIt('commonmark' ,{'breaks':True,'html':True})\n    .use(front_matter_plugin)\n    .use(footnote_plugin)\n    .enable('table')\n)\ntext = (\"\"\"\n---\na: 1\n---\n\na | b\n- | -\n1 | 2\n\nA footnote [^1]\n\n[^1]: some details\n\"\"\")\ntokens = md.parse(text)\nhtml_text = md.render(text)\n\n## To export the html to a file, uncomment the lines below:\n# from pathlib import Path\n# Path(\"output.html\").write_text(html_text)\n```\n\n### Command-line Usage\n\nRender markdown to HTML with markdown-it-py from the\ncommand-line:\n\n```console\nusage: markdown-it [-h] [-v] [filenames [filenames ...]]\n\nParse one or more markdown files, convert each to HTML, and print to stdout\n\npositional arguments:\n  filenames      specify an optional list of files to convert\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show program's version number and exit\n\nInteractive:\n\n  $ markdown-it\n  markdown-it-py [version 0.0.0] (interactive)\n  Type Ctrl-D to complete input, or Ctrl-C to exit.\n  >>> # Example\n  ... > markdown *input*\n  ...\n  <h1>Example</h1>\n  <blockquote>\n  <p>markdown <em>input</em></p>\n  </blockquote>\n\nBatch:\n\n  $ markdown-it README.md README.footer.md > index.html\n\n```\n\n## References / Thanks\n\nBig thanks to the authors of [markdown-it]:\n\n- Alex Kocharin [github/rlidwka](https://github.com/rlidwka)\n- Vitaly Puzrin [github/puzrin](https://github.com/puzrin)\n\nAlso [John MacFarlane](https://github.com/jgm) for his work on the CommonMark spec and reference implementations.\n\n[github-ci]: https://github.com/executablebooks/markdown-it-py/workflows/Python%20package/badge.svg?branch=master\n[github-link]: https://github.com/executablebooks/markdown-it-py\n[pypi-badge]: https://img.shields.io/pypi/v/markdown-it-py.svg\n[pypi-link]: https://pypi.org/project/markdown-it-py\n[conda-badge]: https://anaconda.org/conda-forge/markdown-it-py/badges/version.svg\n[conda-link]: https://anaconda.org/conda-forge/markdown-it-py\n[codecov-badge]: https://codecov.io/gh/executablebooks/markdown-it-py/branch/master/graph/badge.svg\n[codecov-link]: https://codecov.io/gh/executablebooks/markdown-it-py\n[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[black-link]: https://github.com/ambv/black\n[install-badge]: https://img.shields.io/pypi/dw/markdown-it-py?label=pypi%20installs\n[install-link]: https://pypistats.org/packages/markdown-it-py\n\n[CommonMark spec]: http://spec.commonmark.org/\n[markdown-it]: https://github.com/markdown-it/markdown-it\n[markdown-it-readme]: https://github.com/markdown-it/markdown-it/blob/master/README.md\n[md-security]: https://markdown-it-py.readthedocs.io/en/latest/other.html\n[md-performance]: https://markdown-it-py.readthedocs.io/en/latest/other.html\n[md-plugins]: https://markdown-it-py.readthedocs.io/en/latest/plugins.html\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/ed/3c/cebfdcad015240014ff08b883d1c0c427f2ba45ae8c6572851b6ef136cad/marshmallow-3.20.1-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=684939db93e80ad3561392f47be0230743131560a41c5110684c16e21ade0a5c",
            "hashes": {
              "sha256": "684939db93e80ad3561392f47be0230743131560a41c5110684c16e21ade0a5c"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "marshmallow",
          "version": "3.20.1",
          "summary": "A lightweight library for converting complex datatypes to and from native Python datatypes.",
          "keywords": [
            "serialization",
            "rest",
            "json",
            "api",
            "marshal",
            "marshalling",
            "deserialization",
            "validation",
            "schema"
          ],
          "home_page": "https://github.com/marshmallow-code/marshmallow",
          "author": "Steven Loria",
          "author_email": "sloria1@gmail.com",
          "license": "MIT",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11"
          ],
          "requires_dist": [
            "packaging (>=17.0)",
            "pytest ; extra == 'dev'",
            "pytz ; extra == 'dev'",
            "simplejson ; extra == 'dev'",
            "mypy (==1.4.1) ; extra == 'dev'",
            "flake8 (==6.0.0) ; extra == 'dev'",
            "flake8-bugbear (==23.7.10) ; extra == 'dev'",
            "pre-commit (<4.0,>=2.4) ; extra == 'dev'",
            "tox ; extra == 'dev'",
            "sphinx (==7.0.1) ; extra == 'docs'",
            "sphinx-issues (==3.0.1) ; extra == 'docs'",
            "alabaster (==0.7.13) ; extra == 'docs'",
            "sphinx-version-warning (==1.1.2) ; extra == 'docs'",
            "autodocsumm (==0.2.11) ; extra == 'docs'",
            "mypy (==1.4.1) ; extra == 'lint'",
            "flake8 (==6.0.0) ; extra == 'lint'",
            "flake8-bugbear (==23.7.10) ; extra == 'lint'",
            "pre-commit (<4.0,>=2.4) ; extra == 'lint'",
            "pytest ; extra == 'tests'",
            "pytz ; extra == 'tests'",
            "simplejson ; extra == 'tests'"
          ],
          "requires_python": ">=3.8",
          "project_url": [
            "Changelog, https://marshmallow.readthedocs.io/en/latest/changelog.html",
            "Issues, https://github.com/marshmallow-code/marshmallow/issues",
            "Funding, https://opencollective.com/marshmallow",
            "Tidelift, https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&utm_medium=pypi"
          ],
          "provides_extra": [
            "dev",
            "docs",
            "lint",
            "tests"
          ],
          "description": "********************************************\nmarshmallow: simplified object serialization\n********************************************\n\n.. image:: https://badgen.net/pypi/v/marshmallow\n    :target: https://pypi.org/project/marshmallow/\n    :alt: Latest version\n\n.. image:: https://github.com/marshmallow-code/marshmallow/actions/workflows/build-release.yml/badge.svg\n    :target: https://github.com/marshmallow-code/marshmallow/actions/workflows/build-release.yml\n    :alt: Build status\n\n.. image:: https://results.pre-commit.ci/badge/github/marshmallow-code/marshmallow/dev.svg\n   :target: https://results.pre-commit.ci/latest/github/marshmallow-code/marshmallow/dev\n   :alt: pre-commit.ci status\n\n.. image:: https://readthedocs.org/projects/marshmallow/badge/\n   :target: https://marshmallow.readthedocs.io/\n   :alt: Documentation\n   \n.. image:: https://badgen.net/badge/code%20style/black/000\n    :target: https://github.com/ambv/black\n    :alt: code style: black\n\n\n**marshmallow** is an ORM/ODM/framework-agnostic library for converting complex datatypes, such as objects, to and from native Python datatypes.\n\n.. code-block:: python\n\n    from datetime import date\n    from pprint import pprint\n\n    from marshmallow import Schema, fields\n\n\n    class ArtistSchema(Schema):\n        name = fields.Str()\n\n\n    class AlbumSchema(Schema):\n        title = fields.Str()\n        release_date = fields.Date()\n        artist = fields.Nested(ArtistSchema())\n\n\n    bowie = dict(name=\"David Bowie\")\n    album = dict(artist=bowie, title=\"Hunky Dory\", release_date=date(1971, 12, 17))\n\n    schema = AlbumSchema()\n    result = schema.dump(album)\n    pprint(result, indent=2)\n    # { 'artist': {'name': 'David Bowie'},\n    #   'release_date': '1971-12-17',\n    #   'title': 'Hunky Dory'}\n\n\nIn short, marshmallow schemas can be used to:\n\n- **Validate** input data.\n- **Deserialize** input data to app-level objects.\n- **Serialize** app-level objects to primitive Python types. The serialized objects can then be rendered to standard formats such as JSON for use in an HTTP API.\n\nGet It Now\n==========\n\n::\n\n    $ pip install -U marshmallow\n\n\nDocumentation\n=============\n\nFull documentation is available at https://marshmallow.readthedocs.io/ .\n\nRequirements\n============\n\n- Python >= 3.8\n\nEcosystem\n=========\n\nA list of marshmallow-related libraries can be found at the GitHub wiki here:\n\nhttps://github.com/marshmallow-code/marshmallow/wiki/Ecosystem\n\nCredits\n=======\n\nContributors\n------------\n\nThis project exists thanks to all the people who contribute.\n\n**You're highly encouraged to participate in marshmallow's development.**\nCheck out the `Contributing Guidelines <https://marshmallow.readthedocs.io/en/latest/contributing.html>`_ to see how you can help.\n\nThank you to all who have already contributed to marshmallow!\n\n.. image:: https://opencollective.com/marshmallow/contributors.svg?width=890&button=false\n    :target: https://marshmallow.readthedocs.io/en/latest/authors.html\n    :alt: Contributors\n\nBackers\n-------\n\nIf you find marshmallow useful, please consider supporting the team with\na donation. Your donation helps move marshmallow forward.\n\nThank you to all our backers! [`Become a backer`_]\n\n.. _`Become a backer`: https://opencollective.com/marshmallow#backer\n\n.. image:: https://opencollective.com/marshmallow/backers.svg?width=890\n    :target: https://opencollective.com/marshmallow#backers\n    :alt: Backers\n\nSponsors\n--------\n\nSupport this project by becoming a sponsor (or ask your company to support this project by becoming a sponsor).\nYour logo will show up here with a link to your website. [`Become a sponsor`_]\n\n.. _`Become a sponsor`: https://opencollective.com/marshmallow#sponsor\n\n.. image:: https://opencollective.com/marshmallow/sponsor/0/avatar.svg\n    :target: https://opencollective.com/marshmallow/sponsor/0/website\n    :alt: Sponsors\n\n.. image:: https://opencollective.com/static/images/become_sponsor.svg\n    :target: https://opencollective.com/marshmallow#sponsor\n    :alt: Become a sponsor\n\n\nProfessional Support\n====================\n\nProfessionally-supported marshmallow is now available through the\n`Tidelift Subscription <https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&utm_medium=readme>`_.\n\nTidelift gives software development teams a single source for purchasing and maintaining their software,\nwith professional-grade assurances from the experts who know it best,\nwhile seamlessly integrating with existing tools. [`Get professional support`_]\n\n.. _`Get professional support`: https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=marshmallow&utm_medium=referral&utm_campaign=github\n\n.. image:: https://user-images.githubusercontent.com/2379650/45126032-50b69880-b13f-11e8-9c2c-abd16c433495.png\n    :target: https://tidelift.com/subscription/pkg/pypi-marshmallow?utm_source=pypi-marshmallow&utm_medium=readme\n    :alt: Get supported marshmallow with Tidelift\n\n\nProject Links\n=============\n\n- Docs: https://marshmallow.readthedocs.io/\n- Changelog: https://marshmallow.readthedocs.io/en/latest/changelog.html\n- Contributing Guidelines: https://marshmallow.readthedocs.io/en/latest/contributing.html\n- PyPI: https://pypi.python.org/pypi/marshmallow\n- Issues: https://github.com/marshmallow-code/marshmallow/issues\n- Donate: https://opencollective.com/marshmallow\n\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE <https://github.com/marshmallow-code/marshmallow/blob/dev/LICENSE>`_ file for more details.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/f1/d2/d735d40355ce41f6d1c50a5d4feef47cd4aad0e2809dd2c8cb01601f04ac/multidict-6.0.4-cp39-cp39-win_amd64.whl",
          "archive_info": {
            "hash": "sha256=33029f5734336aa0d4c0384525da0387ef89148dc7191aae00ca5fb23d7aafc2",
            "hashes": {
              "sha256": "33029f5734336aa0d4c0384525da0387ef89148dc7191aae00ca5fb23d7aafc2"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "multidict",
          "version": "6.0.4",
          "summary": "multidict implementation",
          "home_page": "https://github.com/aio-libs/multidict",
          "author": "Andrew Svetlov",
          "author_email": "andrew.svetlov@gmail.com",
          "license": "Apache 2",
          "classifier": [
            "License :: OSI Approved :: Apache Software License",
            "Intended Audience :: Developers",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Development Status :: 5 - Production/Stable"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Chat: Gitter, https://gitter.im/aio-libs/Lobby",
            "CI: GitHub, https://github.com/aio-libs/multidict/actions",
            "Coverage: codecov, https://codecov.io/github/aio-libs/multidict",
            "Docs: RTD, https://multidict.readthedocs.io",
            "GitHub: issues, https://github.com/aio-libs/multidict/issues",
            "GitHub: repo, https://github.com/aio-libs/multidict"
          ],
          "description": "=========\r\nmultidict\r\n=========\r\n\r\n.. image:: https://github.com/aio-libs/multidict/workflows/CI/badge.svg\r\n   :target: https://github.com/aio-libs/multidict/actions?query=workflow%3ACI\r\n   :alt: GitHub status for master branch\r\n\r\n.. image:: https://codecov.io/gh/aio-libs/multidict/branch/master/graph/badge.svg\r\n   :target: https://codecov.io/gh/aio-libs/multidict\r\n   :alt: Coverage metrics\r\n\r\n.. image:: https://img.shields.io/pypi/v/multidict.svg\r\n   :target: https://pypi.org/project/multidict\r\n   :alt: PyPI\r\n\r\n.. image:: https://readthedocs.org/projects/multidict/badge/?version=latest\r\n   :target: http://multidict.readthedocs.org/en/latest/?badge=latest\r\n   :alt: Documentationb\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/multidict.svg\r\n   :target: https://pypi.org/project/multidict\r\n   :alt: Python versions\r\n\r\n.. image:: https://badges.gitter.im/Join%20Chat.svg\r\n   :target: https://gitter.im/aio-libs/Lobby\r\n   :alt: Chat on Gitter\r\n\r\nMultidict is dict-like collection of *key-value pairs* where key\r\nmight occur more than once in the container.\r\n\r\nIntroduction\r\n------------\r\n\r\n*HTTP Headers* and *URL query string* require specific data structure:\r\n*multidict*. It behaves mostly like a regular ``dict`` but it may have\r\nseveral *values* for the same *key* and *preserves insertion ordering*.\r\n\r\nThe *key* is ``str`` (or ``istr`` for case-insensitive dictionaries).\r\n\r\n``multidict`` has four multidict classes:\r\n``MultiDict``, ``MultiDictProxy``, ``CIMultiDict``\r\nand ``CIMultiDictProxy``.\r\n\r\nImmutable proxies (``MultiDictProxy`` and\r\n``CIMultiDictProxy``) provide a dynamic view for the\r\nproxied multidict, the view reflects underlying collection changes. They\r\nimplement the ``collections.abc.Mapping`` interface.\r\n\r\nRegular mutable (``MultiDict`` and ``CIMultiDict``) classes\r\nimplement ``collections.abc.MutableMapping`` and allows them to change\r\ntheir own content.\r\n\r\n\r\n*Case insensitive* (``CIMultiDict`` and\r\n``CIMultiDictProxy``) assume the *keys* are case\r\ninsensitive, e.g.::\r\n\r\n   >>> dct = CIMultiDict(key='val')\r\n   >>> 'Key' in dct\r\n   True\r\n   >>> dct['Key']\r\n   'val'\r\n\r\n*Keys* should be ``str`` or ``istr`` instances.\r\n\r\nThe library has optional C Extensions for speed.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nApache 2\r\n\r\nLibrary Installation\r\n--------------------\r\n\r\n.. code-block:: bash\r\n\r\n   $ pip install multidict\r\n\r\nThe library is Python 3 only!\r\n\r\nPyPI contains binary wheels for Linux, Windows and MacOS.  If you want to install\r\n``multidict`` on another operating system (or *Alpine Linux* inside a Docker) the\r\ntarball will be used to compile the library from source.  It requires a C compiler and\r\nPython headers to be installed.\r\n\r\nTo skip the compilation, please use the `MULTIDICT_NO_EXTENSIONS` environment variable,\r\ne.g.:\r\n\r\n.. code-block:: bash\r\n\r\n   $ MULTIDICT_NO_EXTENSIONS=1 pip install multidict\r\n\r\nPlease note, the pure Python (uncompiled) version is about 20-50 times slower depending on\r\nthe usage scenario!!!\r\n\r\n\r\n\r\nChangelog\r\n---------\r\nSee `RTD page <http://multidict.readthedocs.org/en/latest/changes.html>`_.\r\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/43/88/29adf0b44ba6ac85045e63734ae0997d3c58d8b1a91c914d240828d0d73d/Pygments-2.16.1-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=13fc09fa63bc8d8671a6d247e1eb303c4b343eaee81d861f3404db2935653692",
            "hashes": {
              "sha256": "13fc09fa63bc8d8671a6d247e1eb303c4b343eaee81d861f3404db2935653692"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "Pygments",
          "version": "2.16.1",
          "summary": "Pygments is a syntax highlighting package written in Python.",
          "description_content_type": "text/x-rst",
          "keywords": [
            "syntax",
            "highlighting"
          ],
          "author_email": "Georg Brandl <georg@python.org>",
          "maintainer": "Matthäus G. Chajdas",
          "maintainer_email": "Georg Brandl <georg@python.org>, Jean Abou Samra <jean@abou-samra.fr>",
          "license": "BSD-2-Clause",
          "classifier": [
            "Development Status :: 6 - Mature",
            "Intended Audience :: Developers",
            "Intended Audience :: End Users/Desktop",
            "Intended Audience :: System Administrators",
            "License :: OSI Approved :: BSD License",
            "Operating System :: OS Independent",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: Implementation :: CPython",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Topic :: Text Processing :: Filters",
            "Topic :: Utilities"
          ],
          "requires_dist": [
            "importlib-metadata ; (python_version < \"3.8\") and extra == 'plugins'"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Homepage, https://pygments.org",
            "Documentation, https://pygments.org/docs",
            "Source, https://github.com/pygments/pygments",
            "Bug Tracker, https://github.com/pygments/pygments/issues",
            "Changelog, https://github.com/pygments/pygments/blob/master/CHANGES"
          ],
          "provides_extra": [
            "plugins"
          ],
          "description": "Pygments\n~~~~~~~~\n\nPygments is a syntax highlighting package written in Python.\n\nIt is a generic syntax highlighter suitable for use in code hosting, forums,\nwikis or other applications that need to prettify source code.  Highlights\nare:\n\n* a wide range of over 500 languages and other text formats is supported\n* special attention is paid to details, increasing quality by a fair amount\n* support for new languages and formats are added easily\n* a number of output formats, presently HTML, LaTeX, RTF, SVG, all image\n  formats that PIL supports and ANSI sequences\n* it is usable as a command-line tool and as a library\n\nCopyright 2006-2023 by the Pygments team, see ``AUTHORS``.\nLicensed under the BSD, see ``LICENSE`` for details.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/65/f3/107a22063bf27bdccf2024833d3445f4eea42b2e598abfbd46f6a63b6cb0/typing_inspect-0.9.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=9ee6fc59062311ef8547596ab6b955e1b8aa46242d854bfc78f4f6b0eff35f9f",
            "hashes": {
              "sha256": "9ee6fc59062311ef8547596ab6b955e1b8aa46242d854bfc78f4f6b0eff35f9f"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "typing-inspect",
          "version": "0.9.0",
          "summary": "Runtime inspection utilities for typing module.",
          "keywords": [
            "typing",
            "function",
            "annotations",
            "type",
            "hints",
            "hinting",
            "checking",
            "checker",
            "typehints",
            "typehinting",
            "typechecking",
            "inspect",
            "reflection",
            "introspection"
          ],
          "home_page": "https://github.com/ilevkivskyi/typing_inspect",
          "author": "Ivan Levkivskyi",
          "author_email": "levkivskyi@gmail.com",
          "license": "MIT",
          "classifier": [
            "Development Status :: 3 - Alpha",
            "Environment :: Console",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 2",
            "Programming Language :: Python :: 2.7",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Topic :: Software Development"
          ],
          "requires_dist": [
            "mypy-extensions (>=0.3.0)",
            "typing-extensions (>=3.7.4)",
            "typing (>=3.7.4) ; python_version < \"3.5\""
          ],
          "description": "Typing Inspect\n==============\n\nThe \"typing_inspect\" module defines experimental API for runtime\ninspection of types defined in the standard \"typing\" module.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/a6/a4/451ac414ebe15fd6b49a457c7e01f0a06f9b512c36e4388a9cfb26568fea/yarl-1.9.2-cp39-cp39-win_amd64.whl",
          "archive_info": {
            "hash": "sha256=61016e7d582bc46a5378ffdd02cd0314fb8ba52f40f9cf4d9a5e7dbef88dee18",
            "hashes": {
              "sha256": "61016e7d582bc46a5378ffdd02cd0314fb8ba52f40f9cf4d9a5e7dbef88dee18"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "yarl",
          "version": "1.9.2",
          "summary": "Yet another URL library",
          "description_content_type": "text/x-rst",
          "home_page": "https://github.com/aio-libs/yarl/",
          "author": "Andrew Svetlov",
          "author_email": "andrew.svetlov@gmail.com",
          "license": "Apache-2.0",
          "classifier": [
            "License :: OSI Approved :: Apache Software License",
            "Intended Audience :: Developers",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Topic :: Internet :: WWW/HTTP"
          ],
          "requires_dist": [
            "multidict (>=4.0)",
            "idna (>=2.0)",
            "typing-extensions (>=3.7.4) ; python_version < \"3.8\""
          ],
          "requires_python": ">=3.7",
          "description": "yarl\r\n====\r\n\r\nThe module provides handy URL class for URL parsing and changing.\r\n\r\n.. image:: https://github.com/aio-libs/yarl/workflows/CI/badge.svg\r\n  :target: https://github.com/aio-libs/yarl/actions?query=workflow%3ACI\r\n  :align: right\r\n\r\n.. image:: https://codecov.io/gh/aio-libs/yarl/branch/master/graph/badge.svg\r\n  :target: https://codecov.io/gh/aio-libs/yarl\r\n\r\n.. image:: https://badge.fury.io/py/yarl.svg\r\n    :target: https://badge.fury.io/py/yarl\r\n\r\n\r\n.. image:: https://readthedocs.org/projects/yarl/badge/?version=latest\r\n    :target: https://yarl.readthedocs.io\r\n\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/yarl.svg\r\n    :target: https://pypi.python.org/pypi/yarl\r\n\r\n.. image:: https://badges.gitter.im/Join%20Chat.svg\r\n    :target: https://gitter.im/aio-libs/Lobby\r\n    :alt: Chat on Gitter\r\n\r\nIntroduction\r\n------------\r\n\r\nUrl is constructed from ``str``:\r\n\r\n.. code-block:: pycon\r\n\r\n   >>> from yarl import URL\r\n   >>> url = URL('https://www.python.org/~guido?arg=1#frag')\r\n   >>> url\r\n   URL('https://www.python.org/~guido?arg=1#frag')\r\n\r\nAll url parts: *scheme*, *user*, *password*, *host*, *port*, *path*,\r\n*query* and *fragment* are accessible by properties:\r\n\r\n.. code-block:: pycon\r\n\r\n   >>> url.scheme\r\n   'https'\r\n   >>> url.host\r\n   'www.python.org'\r\n   >>> url.path\r\n   '/~guido'\r\n   >>> url.query_string\r\n   'arg=1'\r\n   >>> url.query\r\n   <MultiDictProxy('arg': '1')>\r\n   >>> url.fragment\r\n   'frag'\r\n\r\nAll url manipulations produce a new url object:\r\n\r\n.. code-block:: pycon\r\n\r\n   >>> url = URL('https://www.python.org')\r\n   >>> url / 'foo' / 'bar'\r\n   URL('https://www.python.org/foo/bar')\r\n   >>> url / 'foo' % {'bar': 'baz'}\r\n   URL('https://www.python.org/foo?bar=baz')\r\n\r\nStrings passed to constructor and modification methods are\r\nautomatically encoded giving canonical representation as result:\r\n\r\n.. code-block:: pycon\r\n\r\n   >>> url = URL('https://www.python.org/путь')\r\n   >>> url\r\n   URL('https://www.python.org/%D0%BF%D1%83%D1%82%D1%8C')\r\n\r\nRegular properties are *percent-decoded*, use ``raw_`` versions for\r\ngetting *encoded* strings:\r\n\r\n.. code-block:: pycon\r\n\r\n   >>> url.path\r\n   '/путь'\r\n\r\n   >>> url.raw_path\r\n   '/%D0%BF%D1%83%D1%82%D1%8C'\r\n\r\nHuman readable representation of URL is available as ``.human_repr()``:\r\n\r\n.. code-block:: pycon\r\n\r\n   >>> url.human_repr()\r\n   'https://www.python.org/путь'\r\n\r\nFor full documentation please read https://yarl.readthedocs.org.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n::\r\n\r\n   $ pip install yarl\r\n\r\nThe library is Python 3 only!\r\n\r\nPyPI contains binary wheels for Linux, Windows and MacOS.  If you want to install\r\n``yarl`` on another operating system (like *Alpine Linux*, which is not\r\nmanylinux-compliant because of the missing glibc and therefore, cannot be\r\nused with our wheels) the the tarball will be used to compile the library from\r\nthe source code. It requires a C compiler and and Python headers installed.\r\n\r\nTo skip the compilation you must explicitly opt-in by setting the `YARL_NO_EXTENSIONS`\r\nenvironment variable to a non-empty value, e.g.:\r\n\r\n.. code-block:: bash\r\n\r\n   $ YARL_NO_EXTENSIONS=1 pip install yarl\r\n\r\nPlease note that the pure-Python (uncompiled) version is much slower. However,\r\nPyPy always uses a pure-Python implementation, and, as such, it is unaffected\r\nby this variable.\r\n\r\nDependencies\r\n------------\r\n\r\nYARL requires multidict_ library.\r\n\r\n\r\nAPI documentation\r\n------------------\r\n\r\nThe documentation is located at https://yarl.readthedocs.org\r\n\r\n\r\nWhy isn't boolean supported by the URL query API?\r\n-------------------------------------------------\r\n\r\nThere is no standard for boolean representation of boolean values.\r\n\r\nSome systems prefer ``true``/``false``, others like ``yes``/``no``, ``on``/``off``,\r\n``Y``/``N``, ``1``/``0``, etc.\r\n\r\n``yarl`` cannot make an unambiguous decision on how to serialize ``bool`` values because\r\nit is specific to how the end-user's application is built and would be different for\r\ndifferent apps.  The library doesn't accept booleans in the API; a user should convert\r\nbools into strings using own preferred translation protocol.\r\n\r\n\r\nComparison with other URL libraries\r\n------------------------------------\r\n\r\n* furl (https://pypi.python.org/pypi/furl)\r\n\r\n  The library has rich functionality but the ``furl`` object is mutable.\r\n\r\n  I'm afraid to pass this object into foreign code: who knows if the\r\n  code will modify my url in a terrible way while I just want to send URL\r\n  with handy helpers for accessing URL properties.\r\n\r\n  ``furl`` has other non-obvious tricky things but the main objection\r\n  is mutability.\r\n\r\n* URLObject (https://pypi.python.org/pypi/URLObject)\r\n\r\n  URLObject is immutable, that's pretty good.\r\n\r\n  Every URL change generates a new URL object.\r\n\r\n  But the library doesn't do any decode/encode transformations leaving the\r\n  end user to cope with these gory details.\r\n\r\n\r\nSource code\r\n-----------\r\n\r\nThe project is hosted on GitHub_\r\n\r\nPlease file an issue on the `bug tracker\r\n<https://github.com/aio-libs/yarl/issues>`_ if you have found a bug\r\nor have some suggestion in order to improve the library.\r\n\r\nThe library uses `Azure Pipelines <https://dev.azure.com/aio-libs/yarl>`_ for\r\nContinuous Integration.\r\n\r\nDiscussion list\r\n---------------\r\n\r\n*aio-libs* google group: https://groups.google.com/forum/#!forum/aio-libs\r\n\r\nFeel free to post your questions and ideas here.\r\n\r\n\r\nAuthors and License\r\n-------------------\r\n\r\nThe ``yarl`` package is written by Andrew Svetlov.\r\n\r\nIt's *Apache 2* licensed and freely available.\r\n\r\n\r\n.. _GitHub: https://github.com/aio-libs/yarl\r\n\r\n.. _multidict: https://github.com/aio-libs/multidict\r\n\r\n\r\n=========\r\nChangelog\r\n=========\r\n\r\n..\r\n    You should *NOT* be adding new change log entries to this file, this\r\n    file is managed by towncrier. You *may* edit previous change logs to\r\n    fix problems like typo corrections or such.\r\n    To add a new change log entry, please see\r\n    https://pip.pypa.io/en/latest/development/#adding-a-news-entry\r\n    we named the news folder \"changes\".\r\n\r\n    WARNING: Don't drop the next directive!\r\n\r\n.. towncrier release notes start\r\n\r\n1.9.2 (2023-04-25)\r\n==================\r\n\r\nBugfixes\r\n--------\r\n\r\n- Fix regression with truediv and absolute URLs with empty paths causing the raw path to lack the leading ``/``. (`#854 <https://github.com/aio-libs/yarl/issues/854>`_)\r\n\r\n\r\n1.9.1 (2023-04-21)\r\n==================\r\n\r\nBugfixes\r\n--------\r\n\r\n- Marked tests that fail on older Python patch releases (< 3.7.10, < 3.8.8 and < 3.9.2) as expected to fail due to missing a security fix for CVE-2021-23336. (`#850 <https://github.com/aio-libs/yarl/issues/850>`_)\r\n\r\n\r\n1.9.0 (2023-04-19)\r\n==================\r\n\r\nThis release was never published to PyPI, due to issues with the build process.\r\n\r\nFeatures\r\n--------\r\n\r\n- Added ``URL.joinpath(*elements)``, to create a new URL appending multiple path elements. (`#704 <https://github.com/aio-libs/yarl/issues/704>`_)\r\n- Made :py``(?P=rendered_text)`` return ``NotImplemented`` if called with an unsupported type — by ``(?P=rendered_text)``. (`#832 <https://github.com/aio-libs/yarl/issues/832>`_)\r\n\r\n\r\nBugfixes\r\n--------\r\n\r\n- Path normalisation for absolute URLs no longer raises a ValueError exception\r\n  when `..` segments would otherwise go beyond the URL path root. (`#536 <https://github.com/aio-libs/yarl/issues/536>`_)\r\n- Fixed an issue with update_query() not getting rid of the query when argument is None. (`#792 <https://github.com/aio-libs/yarl/issues/792>`_)\r\n- Added some input restrictions on with_port() function to prevent invalid boolean inputs or out of valid port inputs; handled incorrect 0 port representation. (`#793 <https://github.com/aio-libs/yarl/issues/793>`_)\r\n- Made :py``(?P=rendered_text)`` raise a :py``(?P=rendered_text)`` if the ``host`` argument is :py``(?P=rendered_text)`` — by ``(?P=rendered_text)``. (`#808 <https://github.com/aio-libs/yarl/issues/808>`_)\r\n- Fixed an issue with ``update_query()`` getting rid of the query when the argument\r\n  is empty but not ``None``. (`#845 <https://github.com/aio-libs/yarl/issues/845>`_)\r\n\r\n\r\nMisc\r\n----\r\n\r\n- `#220 <https://github.com/aio-libs/yarl/issues/220>`_\r\n\r\n\r\n1.8.2 (2022-12-03)\r\n==================\r\n\r\nThis is the first release that started shipping wheels for Python 3.11.\r\n\r\n\r\n1.8.1 (2022-08-01)\r\n==================\r\n\r\nMisc\r\n----\r\n\r\n- `#694 <https://github.com/aio-libs/yarl/issues/694>`_, `#699 <https://github.com/aio-libs/yarl/issues/699>`_, `#700 <https://github.com/aio-libs/yarl/issues/700>`_, `#701 <https://github.com/aio-libs/yarl/issues/701>`_, `#702 <https://github.com/aio-libs/yarl/issues/702>`_, `#703 <https://github.com/aio-libs/yarl/issues/703>`_, `#739 <https://github.com/aio-libs/yarl/issues/739>`_\r\n\r\n\r\n1.8.0 (2022-08-01)\r\n==================\r\n\r\nFeatures\r\n--------\r\n\r\n- Added ``URL.raw_suffix``, ``URL.suffix``, ``URL.raw_suffixes``, ``URL.suffixes``, ``URL.with_suffix``. (`#613 <https://github.com/aio-libs/yarl/issues/613>`_)\r\n\r\n\r\nImproved Documentation\r\n----------------------\r\n\r\n- Fixed broken internal references to ``(?P=rendered_text)``. (`#665 <https://github.com/aio-libs/yarl/issues/665>`_)\r\n- Fixed broken external references to ``(?P=rendered_text)`` docs. (`#665 <https://github.com/aio-libs/yarl/issues/665>`_)\r\n\r\n\r\nDeprecations and Removals\r\n-------------------------\r\n\r\n- Dropped Python 3.6 support. (`#672 <https://github.com/aio-libs/yarl/issues/672>`_)\r\n\r\n\r\nMisc\r\n----\r\n\r\n- `#646 <https://github.com/aio-libs/yarl/issues/646>`_, `#699 <https://github.com/aio-libs/yarl/issues/699>`_, `#701 <https://github.com/aio-libs/yarl/issues/701>`_\r\n\r\n\r\n1.7.2 (2021-11-01)\r\n==================\r\n\r\nBugfixes\r\n--------\r\n\r\n- Changed call in ``with_port()`` to stop reencoding parts of the URL that were already encoded. (`#623 <https://github.com/aio-libs/yarl/issues/623>`_)\r\n\r\n\r\n1.7.1 (2021-10-07)\r\n==================\r\n\r\nBugfixes\r\n--------\r\n\r\n- Fix 1.7.0 build error\r\n\r\n1.7.0 (2021-10-06)\r\n==================\r\n\r\nFeatures\r\n--------\r\n\r\n- Add `__bytes__()` magic method so that `bytes(url)` will work and use optimal ASCII encoding. (`#582 <https://github.com/aio-libs/yarl/issues/582>`_)\r\n- Started shipping platform-specific arm64 wheels for Apple Silicon. (`#622 <https://github.com/aio-libs/yarl/issues/622>`_)\r\n- Started shipping platform-specific wheels with the ``musl`` tag targeting typical Alpine Linux runtimes. (`#622 <https://github.com/aio-libs/yarl/issues/622>`_)\r\n- Added support for Python 3.10. (`#622 <https://github.com/aio-libs/yarl/issues/622>`_)\r\n\r\n\r\n1.6.3 (2020-11-14)\r\n==================\r\n\r\nBugfixes\r\n--------\r\n\r\n- No longer loose characters when decoding incorrect percent-sequences (like ``%e2%82%f8``). All non-decodable percent-sequences are now preserved.\r\n  `#517 <https://github.com/aio-libs/yarl/issues/517>`_\r\n- Provide x86 Windows wheels.\r\n  `#535 <https://github.com/aio-libs/yarl/issues/535>`_\r\n\r\n\r\n----\r\n\r\n\r\n1.6.2 (2020-10-12)\r\n==================\r\n\r\n\r\nBugfixes\r\n--------\r\n\r\n- Provide generated ``.c`` files in TarBall distribution.\r\n  `#530  <https://github.com/aio-libs/multidict/issues/530>`_\r\n\r\n1.6.1 (2020-10-12)\r\n==================\r\n\r\nFeatures\r\n--------\r\n\r\n- Provide wheels for ``aarch64``, ``i686``, ``ppc64le``, ``s390x`` architectures on\r\n  Linux as well as ``x86_64``.\r\n  `#507  <https://github.com/aio-libs/yarl/issues/507>`_\r\n- Provide wheels for Python 3.9.\r\n  `#526 <https://github.com/aio-libs/yarl/issues/526>`_\r\n\r\nBugfixes\r\n--------\r\n\r\n- ``human_repr()`` now always produces valid representation equivalent to the original URL (if the original URL is valid).\r\n  `#511 <https://github.com/aio-libs/yarl/issues/511>`_\r\n- Fixed  requoting a single percent followed by a percent-encoded character in the Cython implementation.\r\n  `#514 <https://github.com/aio-libs/yarl/issues/514>`_\r\n- Fix ValueError when decoding ``%`` which is not followed by two hexadecimal digits.\r\n  `#516 <https://github.com/aio-libs/yarl/issues/516>`_\r\n- Fix decoding ``%`` followed by a space and hexadecimal digit.\r\n  `#520 <https://github.com/aio-libs/yarl/issues/520>`_\r\n- Fix annotation of ``with_query()``/``update_query()`` methods for ``key=[val1, val2]`` case.\r\n  `#528 <https://github.com/aio-libs/yarl/issues/528>`_\r\n\r\nRemoval\r\n-------\r\n\r\n- Drop Python 3.5 support; Python 3.6 is the minimal supported Python version.\r\n\r\n\r\n----\r\n\r\n\r\n1.6.0 (2020-09-23)\r\n==================\r\n\r\nFeatures\r\n--------\r\n\r\n- Allow for int and float subclasses in query, while still denying bool.\r\n  `#492 <https://github.com/aio-libs/yarl/issues/492>`_\r\n\r\n\r\nBugfixes\r\n--------\r\n\r\n- Do not requote arguments in ``URL.build()``, ``with_xxx()`` and in ``/`` operator.\r\n  `#502 <https://github.com/aio-libs/yarl/issues/502>`_\r\n- Keep IPv6 brackets in ``origin()``.\r\n  `#504 <https://github.com/aio-libs/yarl/issues/504>`_\r\n\r\n\r\n----\r\n\r\n\r\n1.5.1 (2020-08-01)\r\n==================\r\n\r\nBugfixes\r\n--------\r\n\r\n- Fix including relocated internal ``yarl._quoting_c`` C-extension into published PyPI dists.\r\n  `#485 <https://github.com/aio-libs/yarl/issues/485>`_\r\n\r\n\r\nMisc\r\n----\r\n\r\n- `#484 <https://github.com/aio-libs/yarl/issues/484>`_\r\n\r\n\r\n----\r\n\r\n\r\n1.5.0 (2020-07-26)\r\n==================\r\n\r\nFeatures\r\n--------\r\n\r\n- Convert host to lowercase on URL building.\r\n  `#386 <https://github.com/aio-libs/yarl/issues/386>`_\r\n- Allow using ``mod`` operator (`%`) for updating query string (an alias for ``update_query()`` method).\r\n  `#435 <https://github.com/aio-libs/yarl/issues/435>`_\r\n- Allow use of sequences such as ``list`` and ``tuple`` in the values\r\n  of a mapping such as ``dict`` to represent that a key has many values::\r\n\r\n      url = URL(\"http://example.com\")\r\n      assert url.with_query({\"a\": [1, 2]}) == URL(\"http://example.com/?a=1&a=2\")\r\n\r\n  `#443 <https://github.com/aio-libs/yarl/issues/443>`_\r\n- Support URL.build() with scheme and path (creates a relative URL).\r\n  `#464 <https://github.com/aio-libs/yarl/issues/464>`_\r\n- Cache slow IDNA encode/decode calls.\r\n  `#476 <https://github.com/aio-libs/yarl/issues/476>`_\r\n- Add ``@final`` / ``Final`` type hints\r\n  `#477 <https://github.com/aio-libs/yarl/issues/477>`_\r\n- Support URL authority/raw_authority properties and authority argument of ``URL.build()`` method.\r\n  `#478 <https://github.com/aio-libs/yarl/issues/478>`_\r\n- Hide the library implementation details, make the exposed public list very clean.\r\n  `#483 <https://github.com/aio-libs/yarl/issues/483>`_\r\n\r\n\r\nBugfixes\r\n--------\r\n\r\n- Fix tests with newer Python (3.7.6, 3.8.1 and 3.9.0+).\r\n  `#409 <https://github.com/aio-libs/yarl/issues/409>`_\r\n- Fix a bug where query component, passed in a form of mapping or sequence, is unquoted in unexpected way.\r\n  `#426 <https://github.com/aio-libs/yarl/issues/426>`_\r\n- Hide `Query` and `QueryVariable` type aliases in `__init__.pyi`, now they are prefixed with underscore.\r\n  `#431 <https://github.com/aio-libs/yarl/issues/431>`_\r\n- Keep ipv6 brackets after updating port/user/password.\r\n  `#451 <https://github.com/aio-libs/yarl/issues/451>`_\r\n\r\n\r\n----\r\n\r\n\r\n1.4.2 (2019-12-05)\r\n==================\r\n\r\nFeatures\r\n--------\r\n\r\n- Workaround for missing `str.isascii()` in Python 3.6\r\n  `#389 <https://github.com/aio-libs/yarl/issues/389>`_\r\n\r\n\r\n----\r\n\r\n\r\n1.4.1 (2019-11-29)\r\n==================\r\n\r\n* Fix regression, make the library work on Python 3.5 and 3.6 again.\r\n\r\n1.4.0 (2019-11-29)\r\n==================\r\n\r\n* Distinguish an empty password in URL from a password not provided at all (#262)\r\n\r\n* Fixed annotations for optional parameters of ``URL.build`` (#309)\r\n\r\n* Use None as default value of ``user`` parameter of ``URL.build`` (#309)\r\n\r\n* Enforce building C Accelerated modules when installing from source tarball, use\r\n  ``YARL_NO_EXTENSIONS`` environment variable for falling back to (slower) Pure Python\r\n  implementation (#329)\r\n\r\n* Drop Python 3.5 support\r\n\r\n* Fix quoting of plus in path by pure python version (#339)\r\n\r\n* Don't create a new URL if fragment is unchanged (#292)\r\n\r\n* Included in error msg the path that produces starting slash forbidden error (#376)\r\n\r\n* Skip slow IDNA encoding for ASCII-only strings (#387)\r\n\r\n\r\n1.3.0 (2018-12-11)\r\n==================\r\n\r\n* Fix annotations for ``query`` parameter (#207)\r\n\r\n* An incoming query sequence can have int variables (the same as for\r\n  Mapping type) (#208)\r\n\r\n* Add ``URL.explicit_port`` property (#218)\r\n\r\n* Give a friendlier error when port can't be converted to int (#168)\r\n\r\n* ``bool(URL())`` now returns ``False`` (#272)\r\n\r\n1.2.6 (2018-06-14)\r\n==================\r\n\r\n* Drop Python 3.4 trove classifier (#205)\r\n\r\n1.2.5 (2018-05-23)\r\n==================\r\n\r\n* Fix annotations for ``build`` (#199)\r\n\r\n1.2.4 (2018-05-08)\r\n==================\r\n\r\n* Fix annotations for ``cached_property`` (#195)\r\n\r\n1.2.3 (2018-05-03)\r\n==================\r\n\r\n* Accept ``str`` subclasses in ``URL`` constructor (#190)\r\n\r\n1.2.2 (2018-05-01)\r\n==================\r\n\r\n* Fix build\r\n\r\n1.2.1 (2018-04-30)\r\n==================\r\n\r\n* Pin minimal required Python to 3.5.3 (#189)\r\n\r\n1.2.0 (2018-04-30)\r\n==================\r\n\r\n* Forbid inheritance, replace ``__init__`` with ``__new__`` (#171)\r\n\r\n* Support PEP-561 (provide type hinting marker) (#182)\r\n\r\n1.1.1 (2018-02-17)\r\n==================\r\n\r\n* Fix performance regression: don't encode empty netloc (#170)\r\n\r\n1.1.0 (2018-01-21)\r\n==================\r\n\r\n* Make pure Python quoter consistent with Cython version (#162)\r\n\r\n1.0.0 (2018-01-15)\r\n==================\r\n\r\n* Use fast path if quoted string does not need requoting (#154)\r\n\r\n* Speed up quoting/unquoting by ``_Quoter`` and ``_Unquoter`` classes (#155)\r\n\r\n* Drop ``yarl.quote`` and ``yarl.unquote`` public functions (#155)\r\n\r\n* Add custom string writer, reuse static buffer if available (#157)\r\n  Code is 50-80 times faster than Pure Python version (was 4-5 times faster)\r\n\r\n* Don't recode IP zone (#144)\r\n\r\n* Support ``encoded=True`` in ``yarl.URL.build()`` (#158)\r\n\r\n* Fix updating query with multiple keys (#160)\r\n\r\n0.18.0 (2018-01-10)\r\n===================\r\n\r\n* Fallback to IDNA 2003 if domain name is not IDNA 2008 compatible (#152)\r\n\r\n0.17.0 (2017-12-30)\r\n===================\r\n\r\n* Use IDNA 2008 for domain name processing (#149)\r\n\r\n0.16.0 (2017-12-07)\r\n===================\r\n\r\n* Fix raising ``TypeError`` by ``url.query_string()`` after\r\n  ``url.with_query({})`` (empty mapping) (#141)\r\n\r\n0.15.0 (2017-11-23)\r\n===================\r\n\r\n* Add ``raw_path_qs`` attribute (#137)\r\n\r\n0.14.2 (2017-11-14)\r\n===================\r\n\r\n* Restore ``strict`` parameter as no-op in ``quote`` / ``unquote``\r\n\r\n0.14.1 (2017-11-13)\r\n===================\r\n\r\n* Restore ``strict`` parameter as no-op for sake of compatibility with\r\n  aiohttp 2.2\r\n\r\n0.14.0 (2017-11-11)\r\n===================\r\n\r\n* Drop strict mode (#123)\r\n\r\n* Fix ``\"ValueError: Unallowed PCT %\"`` when there's a ``\"%\"`` in the url (#124)\r\n\r\n0.13.0 (2017-10-01)\r\n===================\r\n\r\n* Document ``encoded`` parameter (#102)\r\n\r\n* Support relative urls like ``'?key=value'`` (#100)\r\n\r\n* Unsafe encoding for QS fixed. Encode ``;`` char in value param (#104)\r\n\r\n* Process passwords without user names (#95)\r\n\r\n0.12.0 (2017-06-26)\r\n===================\r\n\r\n* Properly support paths without leading slash in ``URL.with_path()`` (#90)\r\n\r\n* Enable type annotation checks\r\n\r\n0.11.0 (2017-06-26)\r\n===================\r\n\r\n* Normalize path (#86)\r\n\r\n* Clear query and fragment parts in ``.with_path()`` (#85)\r\n\r\n0.10.3 (2017-06-13)\r\n===================\r\n\r\n* Prevent double URL args unquoting (#83)\r\n\r\n0.10.2 (2017-05-05)\r\n===================\r\n\r\n* Unexpected hash behaviour (#75)\r\n\r\n\r\n0.10.1 (2017-05-03)\r\n===================\r\n\r\n* Unexpected compare behaviour (#73)\r\n\r\n* Do not quote or unquote + if not a query string. (#74)\r\n\r\n\r\n0.10.0 (2017-03-14)\r\n===================\r\n\r\n* Added ``URL.build`` class method (#58)\r\n\r\n* Added ``path_qs`` attribute (#42)\r\n\r\n\r\n0.9.8 (2017-02-16)\r\n==================\r\n\r\n* Do not quote ``:`` in path\r\n\r\n\r\n0.9.7 (2017-02-16)\r\n==================\r\n\r\n* Load from pickle without _cache (#56)\r\n\r\n* Percent-encoded pluses in path variables become spaces (#59)\r\n\r\n\r\n0.9.6 (2017-02-15)\r\n==================\r\n\r\n* Revert backward incompatible change (BaseURL)\r\n\r\n\r\n0.9.5 (2017-02-14)\r\n==================\r\n\r\n* Fix BaseURL rich comparison support\r\n\r\n\r\n0.9.4 (2017-02-14)\r\n==================\r\n\r\n* Use BaseURL\r\n\r\n\r\n0.9.3 (2017-02-14)\r\n==================\r\n\r\n* Added BaseURL\r\n\r\n\r\n0.9.2 (2017-02-08)\r\n==================\r\n\r\n* Remove debug print\r\n\r\n\r\n0.9.1 (2017-02-07)\r\n==================\r\n\r\n* Do not lose tail chars (#45)\r\n\r\n\r\n0.9.0 (2017-02-07)\r\n==================\r\n\r\n* Allow to quote ``%`` in non strict mode (#21)\r\n\r\n* Incorrect parsing of query parameters with %3B (;) inside (#34)\r\n\r\n* Fix core dumps (#41)\r\n\r\n* tmpbuf - compiling error (#43)\r\n\r\n* Added ``URL.update_path()`` method\r\n\r\n* Added ``URL.update_query()`` method (#47)\r\n\r\n\r\n0.8.1 (2016-12-03)\r\n==================\r\n\r\n* Fix broken aiohttp: revert back ``quote`` / ``unquote``.\r\n\r\n\r\n0.8.0 (2016-12-03)\r\n==================\r\n\r\n* Support more verbose error messages in ``.with_query()`` (#24)\r\n\r\n* Don't percent-encode ``@`` and ``:`` in path (#32)\r\n\r\n* Don't expose ``yarl.quote`` and ``yarl.unquote``, these functions are\r\n  part of private API\r\n\r\n0.7.1 (2016-11-18)\r\n==================\r\n\r\n* Accept not only ``str`` but all classes inherited from ``str`` also (#25)\r\n\r\n0.7.0 (2016-11-07)\r\n==================\r\n\r\n* Accept ``int`` as value for ``.with_query()``\r\n\r\n0.6.0 (2016-11-07)\r\n==================\r\n\r\n* Explicitly use UTF8 encoding in setup.py (#20)\r\n* Properly unquote non-UTF8 strings (#19)\r\n\r\n0.5.3 (2016-11-02)\r\n==================\r\n\r\n* Don't use namedtuple fields but indexes on URL construction\r\n\r\n0.5.2 (2016-11-02)\r\n==================\r\n\r\n* Inline ``_encode`` class method\r\n\r\n0.5.1 (2016-11-02)\r\n==================\r\n\r\n* Make URL construction faster by removing extra classmethod calls\r\n\r\n0.5.0 (2016-11-02)\r\n==================\r\n\r\n* Add cython optimization for quoting/unquoting\r\n* Provide binary wheels\r\n\r\n0.4.3 (2016-09-29)\r\n==================\r\n\r\n* Fix typing stubs\r\n\r\n0.4.2 (2016-09-29)\r\n==================\r\n\r\n* Expose ``quote()`` and ``unquote()`` as public API\r\n\r\n0.4.1 (2016-09-28)\r\n==================\r\n\r\n* Support empty values in query (``'/path?arg'``)\r\n\r\n0.4.0 (2016-09-27)\r\n==================\r\n\r\n* Introduce ``relative()`` (#16)\r\n\r\n0.3.2 (2016-09-27)\r\n==================\r\n\r\n* Typo fixes #15\r\n\r\n0.3.1 (2016-09-26)\r\n==================\r\n\r\n* Support sequence of pairs as ``with_query()`` parameter\r\n\r\n0.3.0 (2016-09-26)\r\n==================\r\n\r\n* Introduce ``is_default_port()``\r\n\r\n0.2.1 (2016-09-26)\r\n==================\r\n\r\n* Raise ValueError for URLs like 'http://:8080/'\r\n\r\n0.2.0 (2016-09-18)\r\n==================\r\n\r\n* Avoid doubling slashes when joining paths (#13)\r\n\r\n* Appending path starting from slash is forbidden (#12)\r\n\r\n0.1.4 (2016-09-09)\r\n==================\r\n\r\n* Add kwargs support for ``with_query()`` (#10)\r\n\r\n0.1.3 (2016-09-07)\r\n==================\r\n\r\n* Document ``with_query()``, ``with_fragment()`` and ``origin()``\r\n\r\n* Allow ``None`` for ``with_query()`` and ``with_fragment()``\r\n\r\n0.1.2 (2016-09-07)\r\n==================\r\n\r\n* Fix links, tune docs theme.\r\n\r\n0.1.1 (2016-09-06)\r\n==================\r\n\r\n* Update README, old version used obsolete API\r\n\r\n0.1.0 (2016-09-06)\r\n==================\r\n\r\n* The library was deeply refactored, bytes are gone away but all\r\n  accepted strings are encoded if needed.\r\n\r\n0.0.1 (2016-08-30)\r\n==================\r\n\r\n* The first release.\r\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/d9/66/48866fc6b158c81cc2bfecc04c480f105c6040e8b077bc54c634b4a67926/zipp-3.17.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=0e923e726174922dce09c53c59ad483ff7bbb8e572e00c7f7c46b88556409f31",
            "hashes": {
              "sha256": "0e923e726174922dce09c53c59ad483ff7bbb8e572e00c7f7c46b88556409f31"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "zipp",
          "version": "3.17.0",
          "summary": "Backport of pathlib-compatible object wrapper for zip files",
          "home_page": "https://github.com/jaraco/zipp",
          "author": "Jason R. Coombs",
          "author_email": "jaraco@jaraco.com",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only"
          ],
          "requires_dist": [
            "sphinx >=3.5 ; extra == 'docs'",
            "sphinx <7.2.5 ; extra == 'docs'",
            "jaraco.packaging >=9.3 ; extra == 'docs'",
            "rst.linker >=1.9 ; extra == 'docs'",
            "furo ; extra == 'docs'",
            "sphinx-lint ; extra == 'docs'",
            "jaraco.tidelift >=1.4 ; extra == 'docs'",
            "pytest >=6 ; extra == 'testing'",
            "pytest-checkdocs >=2.4 ; extra == 'testing'",
            "pytest-cov ; extra == 'testing'",
            "pytest-enabler >=2.2 ; extra == 'testing'",
            "pytest-ruff ; extra == 'testing'",
            "jaraco.itertools ; extra == 'testing'",
            "jaraco.functools ; extra == 'testing'",
            "more-itertools ; extra == 'testing'",
            "big-O ; extra == 'testing'",
            "pytest-ignore-flaky ; extra == 'testing'",
            "pytest-black >=0.3.7 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
            "pytest-mypy >=0.9.1 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
          ],
          "requires_python": ">=3.8",
          "provides_extra": [
            "docs",
            "testing"
          ],
          "description": ".. image:: https://img.shields.io/pypi/v/zipp.svg\n   :target: https://pypi.org/project/zipp\n\n.. image:: https://img.shields.io/pypi/pyversions/zipp.svg\n\n.. image:: https://github.com/jaraco/zipp/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/zipp/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: Ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. .. image:: https://readthedocs.org/projects/PROJECT_RTD/badge/?version=latest\n..    :target: https://PROJECT_RTD.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/zipp\n   :target: https://tidelift.com/subscription/pkg/pypi-zipp?utm_source=pypi-zipp&utm_medium=readme\n\n\nA pathlib-compatible Zipfile object wrapper. Official backport of the standard library\n`Path object <https://docs.python.org/3.8/library/zipfile.html#path-objects>`_.\n\n\nCompatibility\n=============\n\nNew features are introduced in this third-party library and later merged\ninto CPython. The following table indicates which versions of this library\nwere contributed to different versions in the standard library:\n\n.. list-table::\n   :header-rows: 1\n\n   * - zipp\n     - stdlib\n   * - 3.15\n     - 3.12\n   * - 3.5\n     - 3.11\n   * - 3.2\n     - 3.10\n   * - 3.3 ??\n     - 3.9\n   * - 1.0\n     - 3.8\n\n\nUsage\n=====\n\nUse ``zipp.Path`` in place of ``zipfile.Path`` on any Python.\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-zipp?utm_source=pypi-zipp&utm_medium=referral&utm_campaign=github>`_.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/fc/34/3030de6f1370931b9dbb4dad48f6ab1015ab1d32447850b9fc94e60097be/idna-3.4-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2",
            "hashes": {
              "sha256": "90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "idna",
          "version": "3.4",
          "summary": "Internationalized Domain Names in Applications (IDNA)",
          "description_content_type": "text/x-rst",
          "author_email": "Kim Davies <kim@cynosure.com.au>",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "Intended Audience :: System Administrators",
            "License :: OSI Approved :: BSD License",
            "Operating System :: OS Independent",
            "Programming Language :: Python",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: Implementation :: CPython",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Topic :: Internet :: Name Service (DNS)",
            "Topic :: Software Development :: Libraries :: Python Modules",
            "Topic :: Utilities"
          ],
          "requires_python": ">=3.5",
          "project_url": [
            "Changelog, https://github.com/kjd/idna/blob/master/HISTORY.rst",
            "Issue tracker, https://github.com/kjd/idna/issues",
            "Source, https://github.com/kjd/idna"
          ],
          "description": "Internationalized Domain Names in Applications (IDNA)\n=====================================================\n\nSupport for the Internationalized Domain Names in\nApplications (IDNA) protocol as specified in `RFC 5891\n<https://tools.ietf.org/html/rfc5891>`_. This is the latest version of\nthe protocol and is sometimes referred to as “IDNA 2008”.\n\nThis library also provides support for Unicode Technical\nStandard 46, `Unicode IDNA Compatibility Processing\n<https://unicode.org/reports/tr46/>`_.\n\nThis acts as a suitable replacement for the “encodings.idna”\nmodule that comes with the Python standard library, but which\nonly supports the older superseded IDNA specification (`RFC 3490\n<https://tools.ietf.org/html/rfc3490>`_).\n\nBasic functions are simply executed:\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\n\nInstallation\n------------\n\nThis package is available for installation from PyPI:\n\n.. code-block:: bash\n\n    $ python3 -m pip install idna\n\n\nUsage\n-----\n\nFor typical usage, the ``encode`` and ``decode`` functions will take a\ndomain name argument and perform a conversion to A-labels or U-labels\nrespectively.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\nYou may use the codec encoding and decoding methods using the\n``idna.codec`` module:\n\n.. code-block:: pycon\n\n    >>> import idna.codec\n    >>> print('домен.испытание'.encode('idna'))\n    b'xn--d1acufc.xn--80akhbyknj4f'\n    >>> print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna'))\n    домен.испытание\n\nConversions can be applied at a per-label basis using the ``ulabel`` or\n``alabel`` functions if necessary:\n\n.. code-block:: pycon\n\n    >>> idna.alabel('测试')\n    b'xn--0zwm56d'\n\nCompatibility Mapping (UTS #46)\n+++++++++++++++++++++++++++++++\n\nAs described in `RFC 5895 <https://tools.ietf.org/html/rfc5895>`_, the\nIDNA specification does not normalize input from different potential\nways a user may input a domain name. This functionality, known as\na “mapping”, is considered by the specification to be a local\nuser-interface issue distinct from IDNA conversion functionality.\n\nThis library provides one such mapping, that was developed by the\nUnicode Consortium. Known as `Unicode IDNA Compatibility Processing\n<https://unicode.org/reports/tr46/>`_, it provides for both a regular\nmapping for typical applications, as well as a transitional mapping to\nhelp migrate from older IDNA 2003 applications.\n\nFor example, “Königsgäßchen” is not a permissible label as *LATIN\nCAPITAL LETTER K* is not allowed (nor are capital letters in general).\nUTS 46 will convert this into lower case prior to applying the IDNA\nconversion.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('Königsgäßchen')\n    ...\n    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of 'Königsgäßchen' not allowed\n    >>> idna.encode('Königsgäßchen', uts46=True)\n    b'xn--knigsgchen-b4a3dun'\n    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))\n    königsgäßchen\n\nTransitional processing provides conversions to help transition from\nthe older 2003 standard to the current standard. For example, in the\noriginal IDNA specification, the *LATIN SMALL LETTER SHARP S* (ß) was\nconverted into two *LATIN SMALL LETTER S* (ss), whereas in the current\nIDNA specification this conversion is not performed.\n\n.. code-block:: pycon\n\n    >>> idna.encode('Königsgäßchen', uts46=True, transitional=True)\n    'xn--knigsgsschen-lcb0w'\n\nImplementors should use transitional processing with caution, only in\nrare cases where conversion from legacy labels to current labels must be\nperformed (i.e. IDNA implementations that pre-date 2008). For typical\napplications that just need to convert labels, transitional processing\nis unlikely to be beneficial and could produce unexpected incompatible\nresults.\n\n``encodings.idna`` Compatibility\n++++++++++++++++++++++++++++++++\n\nFunction calls from the Python built-in ``encodings.idna`` module are\nmapped to their IDNA 2008 equivalents using the ``idna.compat`` module.\nSimply substitute the ``import`` clause in your code to refer to the new\nmodule name.\n\nExceptions\n----------\n\nAll errors raised during the conversion following the specification\nshould raise an exception derived from the ``idna.IDNAError`` base\nclass.\n\nMore specific exceptions that may be generated as ``idna.IDNABidiError``\nwhen the error reflects an illegal combination of left-to-right and\nright-to-left characters in a label; ``idna.InvalidCodepoint`` when\na specific codepoint is an illegal character in an IDN label (i.e.\nINVALID); and ``idna.InvalidCodepointContext`` when the codepoint is\nillegal based on its positional context (i.e. it is CONTEXTO or CONTEXTJ\nbut the contextual requirements are not satisfied.)\n\nBuilding and Diagnostics\n------------------------\n\nThe IDNA and UTS 46 functionality relies upon pre-calculated lookup\ntables for performance. These tables are derived from computing against\neligibility criteria in the respective standards. These tables are\ncomputed using the command-line script ``tools/idna-data``.\n\nThis tool will fetch relevant codepoint data from the Unicode repository\nand perform the required calculations to identify eligibility. There are\nthree main modes:\n\n* ``idna-data make-libdata``. Generates ``idnadata.py`` and\n  ``uts46data.py``, the pre-calculated lookup tables using for IDNA and\n  UTS 46 conversions. Implementors who wish to track this library against\n  a different Unicode version may use this tool to manually generate a\n  different version of the ``idnadata.py`` and ``uts46data.py`` files.\n\n* ``idna-data make-table``. Generate a table of the IDNA disposition\n  (e.g. PVALID, CONTEXTJ, CONTEXTO) in the format found in Appendix\n  B.1 of RFC 5892 and the pre-computed tables published by `IANA\n  <https://www.iana.org/>`_.\n\n* ``idna-data U+0061``. Prints debugging output on the various\n  properties associated with an individual Unicode codepoint (in this\n  case, U+0061), that are used to assess the IDNA and UTS 46 status of a\n  codepoint. This is helpful in debugging or analysis.\n\nThe tool accepts a number of arguments, described using ``idna-data\n-h``. Most notably, the ``--version`` argument allows the specification\nof the version of Unicode to use in computing the table data. For\nexample, ``idna-data --version 9.0.0 make-libdata`` will generate\nlibrary data against Unicode 9.0.0.\n\n\nAdditional Notes\n----------------\n\n* **Packages**. The latest tagged release version is published in the\n  `Python Package Index <https://pypi.org/project/idna/>`_.\n\n* **Version support**. This library supports Python 3.5 and higher.\n  As this library serves as a low-level toolkit for a variety of\n  applications, many of which strive for broad compatibility with older\n  Python versions, there is no rush to remove older intepreter support.\n  Removing support for older versions should be well justified in that the\n  maintenance burden has become too high.\n\n* **Python 2**. Python 2 is supported by version 2.x of this library.\n  While active development of the version 2.x series has ended, notable\n  issues being corrected may be backported to 2.x. Use \"idna<3\" in your\n  requirements file if you need this library for a Python 2 application.\n\n* **Testing**. The library has a test suite based on each rule of the\n  IDNA specification, as well as tests that are provided as part of the\n  Unicode Technical Standard 46, `Unicode IDNA Compatibility Processing\n  <https://unicode.org/reports/tr46/>`_.\n\n* **Emoji**. It is an occasional request to support emoji domains in\n  this library. Encoding of symbols like emoji is expressly prohibited by\n  the technical standard IDNA 2008 and emoji domains are broadly phased\n  out across the domain industry due to associated security risks. For\n  now, applications that wish need to support these non-compliant labels\n  may wish to consider trying the encode/decode operation in this library\n  first, and then falling back to using `encodings.idna`. See `the Github\n  project <https://github.com/kjd/idna/issues/18>`_ for more discussion.\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/b3/38/89ba8ad64ae25be8de66a6d463314cf1eb366222074cfda9ee839c56a4b4/mdurl-0.1.2-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8",
            "hashes": {
              "sha256": "84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "mdurl",
          "version": "0.1.2",
          "summary": "Markdown URL utilities",
          "description_content_type": "text/markdown",
          "keywords": [
            "markdown",
            "commonmark"
          ],
          "author_email": "Taneli Hukkinen <hukkin@users.noreply.github.com>",
          "classifier": [
            "License :: OSI Approved :: MIT License",
            "Operating System :: MacOS",
            "Operating System :: Microsoft :: Windows",
            "Operating System :: POSIX :: Linux",
            "Programming Language :: Python :: 3 :: Only",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: Implementation :: CPython",
            "Programming Language :: Python :: Implementation :: PyPy",
            "Topic :: Software Development :: Libraries :: Python Modules",
            "Typing :: Typed"
          ],
          "requires_python": ">=3.7",
          "project_url": [
            "Homepage, https://github.com/executablebooks/mdurl"
          ],
          "description": "# mdurl\n\n[![Build Status](https://github.com/executablebooks/mdurl/workflows/Tests/badge.svg?branch=master)](https://github.com/executablebooks/mdurl/actions?query=workflow%3ATests+branch%3Amaster+event%3Apush)\n[![codecov.io](https://codecov.io/gh/executablebooks/mdurl/branch/master/graph/badge.svg)](https://codecov.io/gh/executablebooks/mdurl)\n[![PyPI version](https://img.shields.io/pypi/v/mdurl)](https://pypi.org/project/mdurl)\n\nThis is a Python port of the JavaScript [mdurl](https://www.npmjs.com/package/mdurl) package.\nSee the [upstream README.md file](https://github.com/markdown-it/mdurl/blob/master/README.md) for API documentation.\n\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/2a/e2/5d3f6ada4297caebe1a2add3b126fe800c96f56dbe5d1988a2cbe0b267aa/mypy_extensions-1.0.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d",
            "hashes": {
              "sha256": "4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "mypy-extensions",
          "version": "1.0.0",
          "summary": "Type system extensions for programs checked with the mypy type checker.",
          "home_page": "https://github.com/python/mypy_extensions",
          "author": "The mypy developers",
          "author_email": "jukka.lehtosalo@iki.fi",
          "license": "MIT License",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Environment :: Console",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Topic :: Software Development"
          ],
          "requires_python": ">=3.5",
          "description": "Mypy Extensions\n===============\n\nThe \"mypy_extensions\" module defines extensions to the standard \"typing\" module\nthat are supported by the mypy type checker and the mypyc compiler.\n"
        }
      },
      {
        "download_info": {
          "url": "https://files.pythonhosted.org/packages/24/21/7d397a4b7934ff4028987914ac1044d3b7d52712f30e2ac7a2ae5bc86dd0/typing_extensions-4.8.0-py3-none-any.whl",
          "archive_info": {
            "hash": "sha256=8f92fc8806f9a6b641eaa5318da32b44d401efaac0f6678c9bc448ba3605faa0",
            "hashes": {
              "sha256": "8f92fc8806f9a6b641eaa5318da32b44d401efaac0f6678c9bc448ba3605faa0"
            }
          }
        },
        "is_direct": false,
        "requested": false,
        "metadata": {
          "metadata_version": "2.1",
          "name": "typing_extensions",
          "version": "4.8.0",
          "summary": "Backported and Experimental Type Hints for Python 3.8+",
          "description_content_type": "text/markdown",
          "keywords": [
            "annotations",
            "backport",
            "checker",
            "checking",
            "function",
            "hinting",
            "hints",
            "type",
            "typechecking",
            "typehinting",
            "typehints",
            "typing"
          ],
          "author_email": "\"Guido van Rossum, Jukka Lehtosalo, Łukasz Langa, Michael Lee\" <levkivskyi@gmail.com>",
          "classifier": [
            "Development Status :: 5 - Production/Stable",
            "Environment :: Console",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Python Software Foundation License",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3 :: Only",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
            "Topic :: Software Development"
          ],
          "requires_python": ">=3.8",
          "project_url": [
            "Bug Tracker, https://github.com/python/typing_extensions/issues",
            "Changes, https://github.com/python/typing_extensions/blob/main/CHANGELOG.md",
            "Documentation, https://typing-extensions.readthedocs.io/",
            "Home, https://github.com/python/typing_extensions",
            "Q & A, https://github.com/python/typing/discussions",
            "Repository, https://github.com/python/typing_extensions"
          ],
          "description": "# Typing Extensions\n\n[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing)\n\n[Documentation](https://typing-extensions.readthedocs.io/en/latest/#) –\n[PyPI](https://pypi.org/project/typing-extensions/)\n\n## Overview\n\nThe `typing_extensions` module serves two related purposes:\n\n- Enable use of new type system features on older Python versions. For example,\n  `typing.TypeGuard` is new in Python 3.10, but `typing_extensions` allows\n  users on previous Python versions to use it too.\n- Enable experimentation with new type system PEPs before they are accepted and\n  added to the `typing` module.\n\n`typing_extensions` is treated specially by static type checkers such as\nmypy and pyright. Objects defined in `typing_extensions` are treated the same\nway as equivalent forms in `typing`.\n\n`typing_extensions` uses\n[Semantic Versioning](https://semver.org/). The\nmajor version will be incremented only for backwards-incompatible changes.\nTherefore, it's safe to depend\non `typing_extensions` like this: `typing_extensions >=x.y, <(x+1)`,\nwhere `x.y` is the first version that includes all features you need.\n\n## Included items\n\nSee [the documentation](https://typing-extensions.readthedocs.io/en/latest/#) for a\ncomplete listing of module contents.\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/python/typing_extensions/blob/main/CONTRIBUTING.md)\nfor how to contribute to `typing_extensions`.\n\n"
        }
      }
    ],
    "environment": {
      "implementation_name": "cpython",
      "implementation_version": "3.9.13",
      "os_name": "nt",
      "platform_machine": "AMD64",
      "platform_release": "10",
      "platform_system": "Windows",
      "platform_version": "10.0.19045",
      "python_full_version": "3.9.13",
      "platform_python_implementation": "CPython",
      "python_version": "3.9",
      "sys_platform": "win32"
    }
  }